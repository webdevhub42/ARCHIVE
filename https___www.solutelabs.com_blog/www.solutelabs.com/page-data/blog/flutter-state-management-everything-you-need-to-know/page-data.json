{"componentChunkName":"component---src-components-blogs-blog-detail-js","path":"/blog/flutter-state-management-everything-you-need-to-know","result":{"pageContext":{"post":{"id":"66969404-22f6-5495-9fe6-6d7fc8b8f002","title":"Flutter State management - everything you need to know","excerpt":"Flutter state management explained by our Flutter developer at SoluteLabs. Learn what it is & different options available for MVVM design pattern.","_rawBody":[{"_key":"762ea5690e79","_type":"block","children":[{"_key":"762ea5690e790","_type":"span","marks":["strong"],"text":"State in layman‚Äôs term: ‚Äúwhatever data you need in order to rebuild your UI at any moment in time‚Äù ‚Äî "},{"_key":"762ea5690e791","_type":"span","marks":["strong","84cee9e5a8ec"],"text":"Flutter.dev"},{"_key":"762ea5690e792","_type":"span","marks":[],"text":""}],"markDefs":[{"_key":"84cee9e5a8ec","_type":"link","href":"https://flutter.dev/docs/development/data-and-backend/state-mgmt/ephemeral-vs-app"}],"style":"blockquote"},{"_key":"ee0878133769","_type":"block","children":[{"_key":"ee08781337690","_type":"span","marks":["strong"],"text":"\n"},{"_key":"ee08781337691","_type":"span","marks":[],"text":"Leading a mobile engineering team at "},{"_key":"ee08781337692","_type":"span","marks":["5955077dbe85"],"text":"SoluteLabs,"},{"_key":"ee08781337693","_type":"span","marks":[],"text":" I often come across questions like which architecture or state management techniques we follow in the context of Flutter. These questions are the primary inspiration for me to write this article."}],"markDefs":[{"_key":"5955077dbe85","_type":"link","href":"https://www.solutelabs.com/"}],"style":"normal"},{"_key":"4ab708132cc7","_type":"block","children":[{"_key":"4ab708132cc70","_type":"span","marks":[],"text":"For Flutter state management, there are a plethora of options available. We can majorly classify them into Ephemeral State and Application State which is explained in great detail "},{"_key":"4ab708132cc71","_type":"span","marks":["c9d48f37f526"],"text":"here"},{"_key":"4ab708132cc72","_type":"span","marks":[],"text":"."}],"markDefs":[{"_key":"c9d48f37f526","_type":"link","href":"https://flutter.dev/docs/development/data-and-backend/state-mgmt/ephemeral-vs-app"}],"style":"normal"},{"_key":"b32b25d66751","_type":"block","children":[{"_key":"b32b25d667510","_type":"span","marks":[],"text":"As an Ephemeral State represents the single widget‚Äôs local state, so it‚Äôs very straightforward to achieve using StatefulWidget and setState() method. The real confusion starts when we want to implement the Application State as there are many ways to achieve the same."}],"markDefs":[],"style":"normal"},{"_key":"92873f6e8802","_type":"block","children":[{"_key":"92873f6e88020","_type":"span","marks":[],"text":"In this article, we will try to understand the key differences of the opinionated state management options for the application state in the context of the MVVM design pattern."}],"markDefs":[],"style":"normal"},{"_key":"ef16083ebba6","_type":"block","children":[{"_key":"ef16083ebba60","_type":"span","marks":["strong"],"text":"A brief introduction to MVVM"}],"markDefs":[],"style":"h2"},{"_key":"bf41b5fd8634","_type":"block","children":[{"_key":"bf41b5fd86340","_type":"span","marks":[],"text":"Writing maintainable and clean code requires strategies like segregating responsibilities into different layers. There are various software architectural patterns that streamline the code organization into separate layers like MVC, MVP, MVVM, etc. MVVM is quite a common design pattern in writing UI based applications in general."}],"markDefs":[],"style":"normal"},{"_key":"e1e67b7cb7d8","_type":"block","children":[{"_key":"e1e67b7cb7d80","_type":"span","marks":[],"text":"A Model-View-View Model mainly concerns these layers:"}],"markDefs":[],"style":"normal"},{"_key":"e988154fcd67","_type":"block","children":[{"_key":"e988154fcd670","_type":"span","marks":["strong"],"text":"View"},{"_key":"e988154fcd671","_type":"span","marks":[],"text":": Responsible for visuals like UI elements on the screen"}],"level":1,"listItem":"bullet","markDefs":[],"style":"normal"},{"_key":"fc8c98214a4c","_type":"block","children":[{"_key":"fc8c98214a4c0","_type":"span","marks":["strong"],"text":"Model"},{"_key":"fc8c98214a4c1","_type":"span","marks":[],"text":": It can be a Repository that takes care of managing data across the services like Database, Network, etc"}],"level":1,"listItem":"bullet","markDefs":[],"style":"normal"},{"_key":"023018e3d7b5","_type":"block","children":[{"_key":"023018e3d7b50","_type":"span","marks":["strong"],"text":"ViewModel"},{"_key":"023018e3d7b51","_type":"span","marks":[],"text":": It acts as a mediator to View & Model. The key responsibilities of this layer are in-taking actions, processing data and give back the new state to the View layer."}],"level":1,"listItem":"bullet","markDefs":[],"style":"normal"},{"_key":"67fa9019ec2e","_type":"customImage","asset":{"_ref":"image-df705de75c7c22513427972331b2eb9aa60e6061-880x475-png","_type":"reference"},"imageFigcaption":"https://jayrambhia.com/blog/android-mvvm-intro","imageFigcaptionName":" Image source"},{"_key":"dd4a125887fe","_type":"block","children":[{"_key":"dd4a125887fe0","_type":"span","marks":["strong"],"text":"1. ChangeNotifier"}],"markDefs":[],"style":"h3"},{"_key":"5c1d1cc8bf72","_type":"block","children":[{"_key":"5c1d1cc8bf720","_type":"span","marks":[],"text":""},{"_key":"5c1d1cc8bf721","_type":"span","marks":["6023ab9f9efc"],"text":"ChangeNotifier"},{"_key":"5c1d1cc8bf722","_type":"span","marks":[],"text":" is the built-in class that provides the notifyListeners() method to inform the changes to the listeners. The ViewModel either extends or mixes this class so that it can notify the property changes to the View layer. You can refer to "},{"_key":"5c1d1cc8bf723","_type":"span","marks":["bea26e1148e3"],"text":"this example"},{"_key":"5c1d1cc8bf724","_type":"span","marks":[],"text":" for understanding how to implement it."}],"markDefs":[{"_key":"6023ab9f9efc","_type":"link","href":"https://api.flutter.dev/flutter/foundation/ChangeNotifier-class.html"},{"_key":"bea26e1148e3","_type":"link","href":"https://flutter.dev/docs/development/data-and-backend/state-mgmt/simple"}],"style":"normal"},{"_key":"3b6613f320fc","_type":"block","children":[{"_key":"3b6613f320fc0","_type":"span","marks":[],"text":"This is a very simple solution when you have a small number of listeners. Adding or removing a listener is O(N) operation and dispatching notifications is O(N¬≤) operation."}],"markDefs":[],"style":"normal"},{"_key":"79a6a472259c","_type":"block","children":[{"_key":"79a6a472259c0","_type":"span","marks":[],"text":"Also, whenever "},{"_key":"79a6a472259c1","_type":"span","marks":["em"],"text":"notifyListeners()"},{"_key":"79a6a472259c2","_type":"span","marks":[],"text":" is called, all its listener widgets get rebuilt even though the property being used in the widget isn‚Äôt changed. One solution for this is to use the subclass of it named "},{"_key":"79a6a472259c3","_type":"span","marks":["strong"],"text":"ValueNotifier"},{"_key":"79a6a472259c4","_type":"span","marks":[],"text":". We can wrap all the properties of the ViewModel which are exposed for the View layer with the "},{"_key":"79a6a472259c5","_type":"span","marks":["006430cd35a7"],"text":"ValueNotifier"},{"_key":"79a6a472259c6","_type":"span","marks":[],"text":". But there are better solutions out there üòâ."}],"markDefs":[{"_key":"006430cd35a7","_type":"link","href":"https://api.flutter.dev/flutter/foundation/ValueNotifier-class.html"}],"style":"normal"},{"_key":"f8d9372f3236","_type":"block","children":[{"_key":"f8d9372f32360","_type":"span","marks":["strong"],"text":"2. PropertyChangeNotifier"}],"markDefs":[],"style":"h3"},{"_key":"881cb3b91fe9","_type":"block","children":[{"_key":"881cb3b91fe90","_type":"span","marks":[],"text":"To overcome the problem of property agnostic change notifications, a package named "},{"_key":"881cb3b91fe91","_type":"span","marks":["fa8f308a045b"],"text":"property_change_notifier"},{"_key":"881cb3b91fe92","_type":"span","marks":[],"text":" is published by the "},{"_key":"881cb3b91fe93","_type":"span","marks":["2782b9aad8c8"],"text":"Very Good Ventures"},{"_key":"881cb3b91fe94","_type":"span","marks":[],"text":". This package gives a drop-in replacement class for ChangeNotifier named PropertyChangeNotifier."}],"markDefs":[{"_key":"fa8f308a045b","_type":"link","href":"https://pub.dev/packages/property_change_notifier"},{"_key":"2782b9aad8c8","_type":"link","href":"https://verygood.ventures/"}],"style":"normal"},{"_key":"349417a4ab62","_type":"block","children":[{"_key":"349417a4ab620","_type":"span","marks":[],"text":"When a property changes in the ViewModel, the name of the property is also included in the notification. Listener widgets can then choose to observe only one or many properties."}],"markDefs":[],"style":"normal"},{"_key":"f3bc4bc39b59","_type":"block","children":[{"_key":"f3bc4bc39b590","_type":"span","marks":[],"text":"Indeed this is a simple solution with no extra effort of adding reactive bindings between the two layers. But rather than manually managing what is changed, what if we can automate the change tracking and have some more powerful features üòÄ?"}],"markDefs":[],"style":"normal"},{"_key":"432705d5f887","_type":"block","children":[{"_key":"432705d5f8870","_type":"span","marks":["strong"],"text":"3. The BLoC pattern ‚Äî ViewModel + Reactiveness Ô∏è‚ö°Ô∏è"}],"markDefs":[],"style":"h3"},{"_key":"32bc85bce09a","_type":"customImage","asset":{"_ref":"image-b727339b57df168f237306b4b097bd712b0a4b4d-962x421-png","_type":"reference"},"imageFigcaption":"https://www.raywenderlich.com/4074597-getting-started-with-the-bloc-pattern","imageFigcaptionName":"Image Source"},{"_key":"d960ca042c96","_type":"block","children":[{"_key":"d960ca042c960","_type":"span","marks":[],"text":"We can use pure dart class as ViewModel and keep the properties as reactive streams. The view layer can add an action in the ViewModel using "},{"_key":"d960ca042c961","_type":"span","marks":["c744cd330911"],"text":"StreamController‚Äôs Sink"},{"_key":"d960ca042c962","_type":"span","marks":[],"text":" or Subject from the "},{"_key":"d960ca042c963","_type":"span","marks":["4bf70aa3e77b"],"text":"RxDart"},{"_key":"d960ca042c964","_type":"span","marks":[],"text":" package. Those actions can be processed and converted to the View representable property streams in the ViewModel. From the View layer, widgets can react to the ViewModel streams using the "},{"_key":"d960ca042c965","_type":"span","marks":["da2248f52ebe"],"text":"StreamBuilder"},{"_key":"d960ca042c966","_type":"span","marks":[],"text":" widget."}],"markDefs":[{"_key":"c744cd330911","_type":"link","href":"https://api.dart.dev/stable/2.7.1/dart-async/StreamController-class.html"},{"_key":"4bf70aa3e77b","_type":"link","href":"https://pub.dev/packages/rxdart"},{"_key":"da2248f52ebe","_type":"link","href":"https://api.flutter.dev/flutter/widgets/StreamBuilder-class.html"}],"style":"normal"},{"_key":"57060f215ba5","_type":"block","children":[{"_key":"57060f215ba50","_type":"span","marks":[],"text":"This is the purest reactive form of state management where we can rebuild the necessary widgets by using specific property stream in the StreamBuilder. In case you want to understand this technique by tutorial, I would recommend "},{"_key":"57060f215ba51","_type":"span","marks":["8ca7355290ba"],"text":"this article"},{"_key":"57060f215ba52","_type":"span","marks":[],"text":". BLoC and ViewModel are identical to me and the subtle difference between them is explained "},{"_key":"57060f215ba53","_type":"span","marks":["1afe4db28c44"],"text":"here"},{"_key":"57060f215ba54","_type":"span","marks":[],"text":"."}],"markDefs":[{"_key":"8ca7355290ba","_type":"link","href":"https://www.raywenderlich.com/4074597-getting-started-with-the-bloc-pattern"},{"_key":"1afe4db28c44","_type":"link","href":"https://stackoverflow.com/questions/54942977/mvvm-vs-bloc-patterns/54943145#54943145"}],"style":"normal"},{"_key":"eb3b5329ec07","_type":"block","children":[{"_key":"eb3b5329ec070","_type":"span","marks":[],"text":"Following this pattern has additional challenges though. As there will be multiple Sinks for accepting different actions and multiple streams exposed for UI reactivity, it‚Äôs very easy to lost tracking the data flow. Let‚Äôs see what our rising community has done to solve this problem üòÑ."}],"markDefs":[],"style":"normal"},{"_key":"fec6511d0e72","_type":"block","children":[{"_key":"fec6511d0e720","_type":"span","marks":["strong"],"text":"4. The BLoC package"}],"markDefs":[],"style":"h3"},{"_key":"28e84f8b59a5","_type":"block","children":[{"_key":"28e84f8b59a50","_type":"span","marks":["em"],"text":"The BLoC package mixes the ideology of the BLoC pattern & "},{"_key":"28e84f8b59a51","_type":"span","marks":["em","da6ea9e88f10"],"text":"Reducer pattern"},{"_key":"28e84f8b59a52","_type":"span","marks":["em"],"text":". It is developed by "},{"_key":"28e84f8b59a53","_type":"span","marks":["em","8c67ce4399e8"],"text":"Felix Angelov,"},{"_key":"28e84f8b59a54","_type":"span","marks":["em"],"text":" a must-follow person in the Flutter community."}],"markDefs":[{"_key":"da6ea9e88f10","_type":"link","href":"https://redux.js.org/basics/reducers/"},{"_key":"8c67ce4399e8","_type":"link","href":"https://twitter.com/felangelov"}],"style":"normal"},{"_key":"1e2b053cb507","_type":"block","children":[{"_key":"1e2b053cb5070","_type":"span","marks":[],"text":"\nA Bloc (Business Logic Component) is a component which converts a Stream of incoming Events into a Stream of outgoing States"}],"markDefs":[],"style":"blockquote"},{"_key":"b0c3a1d4b443","_type":"block","children":[{"_key":"b0c3a1d4b4430","_type":"span","marks":["strong"],"text":"‚Äî "},{"_key":"b0c3a1d4b4431","_type":"span","marks":["strong","1dc900500ad7"],"text":"BLoC Library"},{"_key":"b0c3a1d4b4432","_type":"span","marks":[],"text":""}],"markDefs":[{"_key":"1dc900500ad7","_type":"link","href":"https://bloclibrary.dev/#/coreconcepts?id=blocs"}],"style":"blockquote"},{"_key":"e7721c63f5f6","_type":"customImage","asset":{"_ref":"image-2c317916f3abc79a69e2bac2f782539a8c9a211a-825x189-png","_type":"reference"}},{"_key":"8a476f807e2b","_type":"block","children":[{"_key":"8a476f807e2b0","_type":"span","marks":[],"text":"The only way to send the event in the Bloc is the add(Event event) method. This input event is mapped to the stream of new states using the mapEventToState method. At any given time we can access the state using state property of the Bloc. For each Event or State, there needs to be a separate class extending Event or State."}],"markDefs":[],"style":"normal"},{"_key":"24fae19fcdae","_type":"block","children":[{"_key":"24fae19fcdae0","_type":"span","marks":[],"text":"With this piped uni-directional data flow, Bloc has introduced powerful features like Transitions, Delegates, and Supervisor. You can follow "},{"_key":"24fae19fcdae1","_type":"span","marks":["f0168c378004"],"text":"this"},{"_key":"24fae19fcdae2","_type":"span","marks":[],"text":" in-depth guide to understand the Bloc anatomy."}],"markDefs":[{"_key":"f0168c378004","_type":"link","href":"https://bloclibrary.dev/#/coreconcepts"}],"style":"normal"},{"_key":"5d9053f3d465","_type":"block","children":[{"_key":"5d9053f3d4650","_type":"span","marks":[],"text":"BlocBuilder is the widget that can listen to the stream of States and rebuilds whenever a new value is added in that stream. We can refine the rebuilds with the additional functional argument named condition as well ü§ü."}],"markDefs":[],"style":"normal"},{"_key":"239c1b4980ce","_type":"block","children":[{"_key":"239c1b4980ce0","_type":"span","marks":["strong"],"text":"Bloc is one of the most opinionated architectures in Flutter. "},{"_key":"239c1b4980ce1","_type":"span","marks":[],"text":"But what if we want the flexibility in the ViewModel and still want automated change tracking in a much simpler way üòÑ?"}],"markDefs":[],"style":"normal"},{"_key":"e484177550a0","_type":"block","children":[{"_key":"e484177550a00","_type":"span","marks":["strong"],"text":"5. MobX"}],"markDefs":[],"style":"h3"},{"_key":"45ecf58e9e7a","_type":"block","children":[{"_key":"45ecf58e9e7a0","_type":"span","marks":[],"text":"MobX is a state management library that makes it simple to connect the reactive data of your application with the UI (or any observer). This wiring is completely automatic and feels very natural."}],"markDefs":[],"style":"normal"},{"_key":"fe826dae248e","_type":"customImage","asset":{"_ref":"image-c51fd6565e48b4eb9715dbef1e68e2c5a8b50ec7-858x435-png","_type":"reference"},"imageFigcaption":"https://mobx.netlify.com/concepts","imageFigcaptionName":"Image Source"},{"_key":"30aab86b2c65","_type":"block","children":[{"_key":"30aab86b2c650","_type":"span","marks":[],"text":"MobX supports the uni-directional data flow. From the View layer, "},{"_key":"30aab86b2c651","_type":"span","marks":["strong"],"text":"Actions"},{"_key":"30aab86b2c652","_type":"span","marks":[],"text":" are dispatched to ViewModel. ViewModel processes the action and mutates the state of its properties which are denoted as "},{"_key":"30aab86b2c653","_type":"span","marks":["strong"],"text":"Observables"},{"_key":"30aab86b2c654","_type":"span","marks":[],"text":". The changes in the observable properties are automatically detected by the View layer and widgets get rebuild "},{"_key":"30aab86b2c655","_type":"span","marks":["strong"],"text":"only if necessary!"},{"_key":"30aab86b2c656","_type":"span","marks":[],"text":" The power of selective rebuilds lies in the "},{"_key":"30aab86b2c657","_type":"span","marks":["strong"],"text":"Reactions"},{"_key":"30aab86b2c658","_type":"span","marks":[],"text":". Reaction automatically tracks the observable properties used in it and only rebuilds the widget if one of those properties gets changed in the ViewModel. The in-depth guide to understanding the MobX in the context of Flutter can be found "},{"_key":"30aab86b2c659","_type":"span","marks":["f5b4806d4a0e"],"text":"here"},{"_key":"30aab86b2c6510","_type":"span","marks":[],"text":"."}],"markDefs":[{"_key":"f5b4806d4a0e","_type":"link","href":"https://mobx.netlify.com/concepts"}],"style":"normal"},{"_key":"01efb33b8a36","_type":"block","children":[{"_key":"01efb33b8a360","_type":"span","marks":[],"text":"                                            .      .     .     .     .    ."}],"markDefs":[],"style":"normal"},{"_key":"cfd5e85e257d","_type":"block","children":[{"_key":"1ad6c1c6b13a","_type":"span","marks":[],"text":"Honorable Mention: Provider"}],"markDefs":[],"style":"h2"},{"_key":"dc5786309fea","_type":"block","children":[{"_key":"dc5786309fea0","_type":"span","marks":[],"text":"A Swiss Army Knife, "},{"_key":"dc5786309fea1","_type":"span","marks":["0e78974be652"],"text":"Provider"},{"_key":"dc5786309fea2","_type":"span","marks":[],"text":" is the perfect blender of Dependency Injection and State Management. It is mostly the syntactic sugar around the "},{"_key":"dc5786309fea3","_type":"span","marks":["30e094f4995c"],"text":"InheritedWidget"},{"_key":"dc5786309fea4","_type":"span","marks":[],"text":" but has to offer a lot more than that. It‚Äôs been developed by "},{"_key":"dc5786309fea5","_type":"span","marks":["strong","a2f6ce6dc160"],"text":"Remi Rousselet"},{"_key":"dc5786309fea6","_type":"span","marks":[],"text":""},{"_key":"dc5786309fea7","_type":"span","marks":["a2f6ce6dc160"],"text":","},{"_key":"dc5786309fea8","_type":"span","marks":[],"text":" another must-follow Flutter enthusiastic. In fact, he has contributed other interesting packages as well which you may want to check out "},{"_key":"dc5786309fea9","_type":"span","marks":["8c5e511d716f"],"text":"here"},{"_key":"dc5786309fea10","_type":"span","marks":[],"text":"."}],"markDefs":[{"_key":"0e78974be652","_type":"link","href":"https://pub.dev/packages/provider"},{"_key":"30e094f4995c","_type":"link","href":"https://api.flutter.dev/flutter/widgets/InheritedWidget-class.html"},{"_key":"a2f6ce6dc160","_type":"link","href":"https://twitter.com/remi_rousselet"},{"_key":"8c5e511d716f","_type":"link","href":"https://pub.dev/publishers/dash-overflow.net/packages"}],"style":"normal"},{"_key":"4e481babd296","_type":"block","children":[{"_key":"4e481babd2960","_type":"span","marks":[],"text":"I find this package as the "},{"_key":"4e481babd2961","_type":"span","marks":["078aed1cd232"],"text":"LCD (Least Common Denominator)"},{"_key":"4e481babd2962","_type":"span","marks":[],"text":" in every Flutter app we have developed so far."}],"markDefs":[{"_key":"078aed1cd232","_type":"link","href":"https://en.wikipedia.org/wiki/Lowest_common_denominator"}],"style":"normal"},{"_key":"11c065b2b6fa","_type":"block","children":[{"_key":"11c065b2b6fa0","_type":"span","marks":[],"text":"In all of the above techniques, we discussed the "},{"_key":"11c065b2b6fa1","_type":"span","marks":["strong"],"text":"communication mechanism"},{"_key":"11c065b2b6fa2","_type":"span","marks":[],"text":" between View and ViewModel layers. The provider comes into the picture even before that. The key responsibilities of the Provider are:"}],"markDefs":[],"style":"normal"},{"_key":"283314fa2561","_type":"block","children":[{"_key":"283314fa25610","_type":"span","marks":[],"text":"Create the instance of the ViewModel somewhere in the widget tree underneath which the widgets need access (shared or direct)"}],"level":1,"listItem":"number","markDefs":[],"style":"normal"},{"_key":"b1849de066df","_type":"block","children":[{"_key":"b1849de066df0","_type":"span","marks":[],"text":"Persist the ViewModel instance across the rebuilds"}],"level":1,"listItem":"number","markDefs":[],"style":"normal"},{"_key":"22235d4f555d","_type":"block","children":[{"_key":"22235d4f555d0","_type":"span","marks":[],"text":"Provide the instance of the ViewModel from the tree when needed beneath."}],"level":1,"listItem":"number","markDefs":[],"style":"normal"},{"_key":"62df95f95ab3","_type":"block","children":[{"_key":"62df95f95ab30","_type":"span","marks":[],"text":"Wrap Up"}],"markDefs":[],"style":"h4"},{"_key":"de6819dfff91","_type":"block","children":[{"_key":"de6819dfff910","_type":"span","marks":[],"text":"We have seen a few of the many state management options available for Flutter, in which we discussed:"}],"markDefs":[],"style":"normal"},{"_key":"2df9c5b33535","_type":"block","children":[{"_key":"2df9c5b335350","_type":"span","marks":[],"text":"The simplest Ephemeral state can be controlled using StatefulWidget and setState() method."}],"level":1,"listItem":"bullet","markDefs":[],"style":"normal"},{"_key":"d6bb4d24ff12","_type":"block","children":[{"_key":"d6bb4d24ff120","_type":"span","marks":[],"text":"A built-in class like ChangeNotifier from Flutter foundation can help us in managing state when there are relatively few listeners."}],"level":1,"listItem":"bullet","markDefs":[],"style":"normal"},{"_key":"d24a4de2a729","_type":"block","children":[{"_key":"d24a4de2a7290","_type":"span","marks":[],"text":"Fine-grain the unnecessary rebuilds with PropertyChangeNotifier."}],"level":1,"listItem":"bullet","markDefs":[],"style":"normal"},{"_key":"808c03dc74f8","_type":"block","children":[{"_key":"808c03dc74f80","_type":"span","marks":[],"text":"Reactive streams benefit us from manually managing the property changes using the BLoC pattern."}],"level":1,"listItem":"bullet","markDefs":[],"style":"normal"},{"_key":"d924a340172f","_type":"block","children":[{"_key":"d924a340172f0","_type":"span","marks":[],"text":"Reducer kind of pattern gives us control over input and output of the ViewModel such as the Bloc package."}],"level":1,"listItem":"bullet","markDefs":[],"style":"normal"},{"_key":"96378f2db51e","_type":"block","children":[{"_key":"96378f2db51e0","_type":"span","marks":[],"text":"Completely automatic, reactive from the ground; MobX can help us write ViewModels which feels natural and tracks changes with no extra effort!"}],"level":1,"listItem":"bullet","markDefs":[],"style":"normal"},{"_key":"87f85d249fc1","_type":"block","children":[{"_key":"87f85d249fc10","_type":"span","marks":[],"text":"There are other options as well which are beyond the scope of this article like "},{"_key":"87f85d249fc11","_type":"span","marks":["fd4cd777ca24"],"text":"Redux"},{"_key":"87f85d249fc12","_type":"span","marks":[],"text":", "},{"_key":"87f85d249fc13","_type":"span","marks":["c89e14384efa"],"text":"Flutter Hooks"},{"_key":"87f85d249fc14","_type":"span","marks":[],"text":", etc."}],"markDefs":[{"_key":"fd4cd777ca24","_type":"link","href":"https://pub.dev/packages/redux"},{"_key":"c89e14384efa","_type":"link","href":"https://pub.dev/packages/flutter_hooks"}],"style":"normal"}],"_rawFaq":[],"publishedAt":"2020-10-02T12:00:00.000Z","_updatedAt":"2021-04-08T12:36:00Z","readingTime":"7 min read","altTagMainImage":null,"titleMetaData":null,"shortanchorlinkh2":[{"h2link":"A brief introduction to MVVM","h2shorttext":"Introduction to MVVM"},{"h2link":"Honorable Mention: Provider","h2shorttext":"Honorable Mention"}],"categories":[{"id":"61b2fbb3-23c5-54d6-aac3-bf8ba2dcecc3","title":"Blog"}],"mainImage":{"asset":{"id":"image-2e7e3089481258e69052bccde4c014b0d3f39cf6-2240x1260-jpg","url":"https://cdn.sanity.io/images/ay6gmb6r/production/2e7e3089481258e69052bccde4c014b0d3f39cf6-2240x1260.jpg","fluid":{"sizes":"(max-width: 800px) 100vw, 800px","src":"https://cdn.sanity.io/images/ay6gmb6r/production/2e7e3089481258e69052bccde4c014b0d3f39cf6-2240x1260.jpg?w=800&h=450&fit=crop","srcSet":"https://cdn.sanity.io/images/ay6gmb6r/production/2e7e3089481258e69052bccde4c014b0d3f39cf6-2240x1260.jpg?w=200&h=113&fit=crop 200w,\nhttps://cdn.sanity.io/images/ay6gmb6r/production/2e7e3089481258e69052bccde4c014b0d3f39cf6-2240x1260.jpg?w=400&h=225&fit=crop 400w,\nhttps://cdn.sanity.io/images/ay6gmb6r/production/2e7e3089481258e69052bccde4c014b0d3f39cf6-2240x1260.jpg?w=800&h=450&fit=crop 800w,\nhttps://cdn.sanity.io/images/ay6gmb6r/production/2e7e3089481258e69052bccde4c014b0d3f39cf6-2240x1260.jpg?w=1200&h=675&fit=crop 1200w,\nhttps://cdn.sanity.io/images/ay6gmb6r/production/2e7e3089481258e69052bccde4c014b0d3f39cf6-2240x1260.jpg?w=1600&h=900&fit=crop 1600w,\nhttps://cdn.sanity.io/images/ay6gmb6r/production/2e7e3089481258e69052bccde4c014b0d3f39cf6-2240x1260.jpg 2240w"}}},"author":{"id":"530ea123-a77b-5f48-9586-0b0856de81ec","name":"Smit Somani","myColor":{"hex":"#1641ff"},"image":{"asset":{"_id":"image-03329bdcba18947d14fd90b55c3ae0e6b2af6e37-288x288-png","assetId":"03329bdcba18947d14fd90b55c3ae0e6b2af6e37","_type":"sanity.imageAsset","id":"image-03329bdcba18947d14fd90b55c3ae0e6b2af6e37-288x288-png"},"_type":"image","_key":null},"slug":{"current":"smit-somani"}},"slug":{"current":"flutter-state-management-everything-you-need-to-know"},"tags":[{"id":"759ffff6-24cd-5a36-a895-100080b7136d","slug":{"current":"flutter"},"title":"Flutter"},{"id":"c35b3444-ecd0-549a-9fb5-bfc9e61cc993","slug":{"current":"app-development"},"title":"App Development"}],"referenceBlogPost":[{"mainImage":{"asset":{"id":"image-52566e987046623a25e2f40a11fa99bbd9f4d4d2-2240x1260-png","fluid":{"src":"https://cdn.sanity.io/images/ay6gmb6r/production/52566e987046623a25e2f40a11fa99bbd9f4d4d2-2240x1260.png?w=800&h=450&fit=crop","srcSet":"https://cdn.sanity.io/images/ay6gmb6r/production/52566e987046623a25e2f40a11fa99bbd9f4d4d2-2240x1260.png?w=200&h=113&fit=crop 200w,\nhttps://cdn.sanity.io/images/ay6gmb6r/production/52566e987046623a25e2f40a11fa99bbd9f4d4d2-2240x1260.png?w=400&h=225&fit=crop 400w,\nhttps://cdn.sanity.io/images/ay6gmb6r/production/52566e987046623a25e2f40a11fa99bbd9f4d4d2-2240x1260.png?w=800&h=450&fit=crop 800w,\nhttps://cdn.sanity.io/images/ay6gmb6r/production/52566e987046623a25e2f40a11fa99bbd9f4d4d2-2240x1260.png?w=1200&h=675&fit=crop 1200w,\nhttps://cdn.sanity.io/images/ay6gmb6r/production/52566e987046623a25e2f40a11fa99bbd9f4d4d2-2240x1260.png?w=1600&h=900&fit=crop 1600w,\nhttps://cdn.sanity.io/images/ay6gmb6r/production/52566e987046623a25e2f40a11fa99bbd9f4d4d2-2240x1260.png 2240w","sizes":"(max-width: 800px) 100vw, 800px"}}},"publishedAt":"2020-07-23T18:30:00.000Z","readingTime":"12 min read","author":{"name":"Karan Shah"},"slug":{"current":"flutter-for-web-an-ultimate-guide"},"title":"Flutter for Web: An Ultimate Guide to Creating Flutter Web Apps"},{"mainImage":{"asset":{"id":"image-c184f98b0b009becaf11c15c2272e16d53539d9e-2240x1260-png","fluid":{"src":"https://cdn.sanity.io/images/ay6gmb6r/production/c184f98b0b009becaf11c15c2272e16d53539d9e-2240x1260.png?w=800&h=450&fit=crop","srcSet":"https://cdn.sanity.io/images/ay6gmb6r/production/c184f98b0b009becaf11c15c2272e16d53539d9e-2240x1260.png?w=200&h=113&fit=crop 200w,\nhttps://cdn.sanity.io/images/ay6gmb6r/production/c184f98b0b009becaf11c15c2272e16d53539d9e-2240x1260.png?w=400&h=225&fit=crop 400w,\nhttps://cdn.sanity.io/images/ay6gmb6r/production/c184f98b0b009becaf11c15c2272e16d53539d9e-2240x1260.png?w=800&h=450&fit=crop 800w,\nhttps://cdn.sanity.io/images/ay6gmb6r/production/c184f98b0b009becaf11c15c2272e16d53539d9e-2240x1260.png?w=1200&h=675&fit=crop 1200w,\nhttps://cdn.sanity.io/images/ay6gmb6r/production/c184f98b0b009becaf11c15c2272e16d53539d9e-2240x1260.png?w=1600&h=900&fit=crop 1600w,\nhttps://cdn.sanity.io/images/ay6gmb6r/production/c184f98b0b009becaf11c15c2272e16d53539d9e-2240x1260.png 2240w","sizes":"(max-width: 800px) 100vw, 800px"}}},"publishedAt":"2019-11-22T12:00:00.000Z","readingTime":"17 min read","author":{"name":"Karan Shah"},"slug":{"current":"flutter-tutorial-for-beginners-step-by-step-guide"},"title":"Flutter Tutorial for Beginners: Step by Step Guide to Build Apps"}]},"readNextBlog":[{"mainImage":{"asset":{"id":"image-52566e987046623a25e2f40a11fa99bbd9f4d4d2-2240x1260-png","fluid":{"src":"https://cdn.sanity.io/images/ay6gmb6r/production/52566e987046623a25e2f40a11fa99bbd9f4d4d2-2240x1260.png?w=800&h=450&fit=crop","srcSet":"https://cdn.sanity.io/images/ay6gmb6r/production/52566e987046623a25e2f40a11fa99bbd9f4d4d2-2240x1260.png?w=200&h=113&fit=crop 200w,\nhttps://cdn.sanity.io/images/ay6gmb6r/production/52566e987046623a25e2f40a11fa99bbd9f4d4d2-2240x1260.png?w=400&h=225&fit=crop 400w,\nhttps://cdn.sanity.io/images/ay6gmb6r/production/52566e987046623a25e2f40a11fa99bbd9f4d4d2-2240x1260.png?w=800&h=450&fit=crop 800w,\nhttps://cdn.sanity.io/images/ay6gmb6r/production/52566e987046623a25e2f40a11fa99bbd9f4d4d2-2240x1260.png?w=1200&h=675&fit=crop 1200w,\nhttps://cdn.sanity.io/images/ay6gmb6r/production/52566e987046623a25e2f40a11fa99bbd9f4d4d2-2240x1260.png?w=1600&h=900&fit=crop 1600w,\nhttps://cdn.sanity.io/images/ay6gmb6r/production/52566e987046623a25e2f40a11fa99bbd9f4d4d2-2240x1260.png 2240w","sizes":"(max-width: 800px) 100vw, 800px"}}},"publishedAt":"2020-07-23T18:30:00.000Z","readingTime":"12 min read","author":{"name":"Karan Shah"},"slug":{"current":"flutter-for-web-an-ultimate-guide"},"title":"Flutter for Web: An Ultimate Guide to Creating Flutter Web Apps"},{"mainImage":{"asset":{"id":"image-c184f98b0b009becaf11c15c2272e16d53539d9e-2240x1260-png","fluid":{"src":"https://cdn.sanity.io/images/ay6gmb6r/production/c184f98b0b009becaf11c15c2272e16d53539d9e-2240x1260.png?w=800&h=450&fit=crop","srcSet":"https://cdn.sanity.io/images/ay6gmb6r/production/c184f98b0b009becaf11c15c2272e16d53539d9e-2240x1260.png?w=200&h=113&fit=crop 200w,\nhttps://cdn.sanity.io/images/ay6gmb6r/production/c184f98b0b009becaf11c15c2272e16d53539d9e-2240x1260.png?w=400&h=225&fit=crop 400w,\nhttps://cdn.sanity.io/images/ay6gmb6r/production/c184f98b0b009becaf11c15c2272e16d53539d9e-2240x1260.png?w=800&h=450&fit=crop 800w,\nhttps://cdn.sanity.io/images/ay6gmb6r/production/c184f98b0b009becaf11c15c2272e16d53539d9e-2240x1260.png?w=1200&h=675&fit=crop 1200w,\nhttps://cdn.sanity.io/images/ay6gmb6r/production/c184f98b0b009becaf11c15c2272e16d53539d9e-2240x1260.png?w=1600&h=900&fit=crop 1600w,\nhttps://cdn.sanity.io/images/ay6gmb6r/production/c184f98b0b009becaf11c15c2272e16d53539d9e-2240x1260.png 2240w","sizes":"(max-width: 800px) 100vw, 800px"}}},"publishedAt":"2019-11-22T12:00:00.000Z","readingTime":"17 min read","author":{"name":"Karan Shah"},"slug":{"current":"flutter-tutorial-for-beginners-step-by-step-guide"},"title":"Flutter Tutorial for Beginners: Step by Step Guide to Build Apps"}],"blogSLug":"flutter-state-management-everything-you-need-to-know"}},"staticQueryHashes":["1951403926","2015784780","2763451262","3649515864","3810076356","4118766420"]}