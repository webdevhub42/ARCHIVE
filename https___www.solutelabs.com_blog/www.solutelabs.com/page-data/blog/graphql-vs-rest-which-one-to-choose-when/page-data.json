{"componentChunkName":"component---src-components-blogs-blog-detail-js","path":"/blog/graphql-vs-rest-which-one-to-choose-when","result":{"pageContext":{"post":{"id":"4ee9aa16-b1d6-5b01-9ab3-eb6cc290b4c4","title":"GraphQL VS REST — Which one to choose when? | SoluteLabs","excerpt":"GraphQL Vs REST — Learn the pros and cons of GraphQL and REST, along with advice on which to choose for your website.","_rawBody":[{"_key":"8c3935c70e2e","_type":"block","children":[{"_key":"8c3935c70e2e0","_type":"span","marks":[],"text":"REST as an API standard has evolved over the past few years, and GraphQL has slowly emerged as an architecture of choice among the developers due to its advantages. Before we dive into the debate of GraphQL vs. REST, let’s brush up a bit on our basics."}],"markDefs":[],"style":"normal"},{"_key":"922bdb26fea8","_type":"block","children":[{"_key":"922bdb26fea80","_type":"span","marks":[],"text":"An API (Application Programming Interface) is the intermediary that lets two software applications to talk to each other. An API dictates how a client can load data from a server."}],"markDefs":[],"style":"normal"},{"_key":"3957dbec369a","_type":"block","children":[{"_key":"3957dbec369a0","_type":"span","marks":[],"text":"GraphQL helps specify precisely what data it needs from an API, which is called declarative data fetching. Now that we have the basics in place let us see how REST and GraphQL came into being."}],"markDefs":[],"style":"normal"},{"_key":"8c5abdf7d2fe","_type":"block","children":[{"_key":"8c5abdf7d2fe0","_type":"span","marks":[],"text":"REST — is History?"}],"markDefs":[],"style":"h2"},{"_key":"810735146453","_type":"block","children":[{"_key":"8107351464530","_type":"span","marks":[],"text":"REST stands for “Representational State Transfer.” It is a set of rules that determines how an API looks like. One of these rules dictates that you should get a resource (a piece of data) when you link to a specific URL."}],"markDefs":[],"style":"normal"},{"_key":"7a34937d8c83","_type":"block","children":[{"_key":"7a34937d8c830","_type":"span","marks":[],"text":"The URL is called a "},{"_key":"7a34937d8c831","_type":"span","marks":["strong"],"text":"request,"},{"_key":"7a34937d8c832","_type":"span","marks":[],"text":" and the data sent back is called a "},{"_key":"7a34937d8c833","_type":"span","marks":["strong"],"text":"response"},{"_key":"7a34937d8c834","_type":"span","marks":[],"text":"."}],"markDefs":[],"style":"normal"},{"_key":"5b95d7187b2b","_type":"block","children":[{"_key":"5b95d7187b2b0","_type":"span","marks":[],"text":"When you call a RESTful API, the server will transfer the representation of the state of the resource to the client."}],"markDefs":[],"style":"normal"},{"_key":"8043a11c0258","_type":"block","children":[{"_key":"8043a11c02580","_type":"span","marks":[],"text":"For example, if you call the Facebook Profile API to fetch a specific user, REST will transfer the state of that user, including name, profile picture, latest posts, and more."}],"markDefs":[],"style":"normal"},{"_key":"429af5c09a59","_type":"customImage","alt":"Image credit","asset":{"_ref":"image-32a8cf483c91bed9d26f172748f532042b30d9d4-700x528-png","_type":"reference"},"crop":{"_type":"sanity.imageCrop","bottom":0,"left":0,"right":0,"top":0},"hotspot":{"_type":"sanity.imageHotspot","height":1,"width":1,"x":0.5,"y":0.5},"imageFigcaption":"https://www.seobility.net/en/wiki/REST_API","imageFigcaptionName":"Image credit"},{"_key":"4191c2bb673c","_type":"block","children":[{"_key":"4191c2bb673c0","_type":"span","marks":[],"text":"To perform an operation in REST, you need to call it in the form of an HTTP request, such as GET, POST, PUT or DELETE. For example, to get the Facebook profile of a particular user, you will need the URL that identifies that user and the HTTP method GET."}],"markDefs":[],"style":"normal"},{"_key":"29c038c3b36e","_type":"block","children":[{"_key":"29c038c3b36e0","_type":"span","marks":[],"text":"Now that you know the basics of REST let’s see how GraphQL came into existence and how it evolved."}],"markDefs":[],"style":"normal"},{"_key":"7213b522880e","_type":"block","children":[{"_key":"7213b522880e0","_type":"span","marks":[],"text":"GraphQL — Better than the REST?"}],"markDefs":[],"style":"h2"},{"_key":"80fd25c262f0","_type":"block","children":[{"_key":"80fd25c262f00","_type":"span","marks":[],"text":"While RESTful APIs provided a great new way of computers to interact with one another, there were also a few hiccups that made developers look elsewhere."}],"markDefs":[],"style":"normal"},{"_key":"084d0d8f349e","_type":"block","children":[{"_key":"084d0d8f349e0","_type":"span","marks":[],"text":"For starters, RESTful APIs returned more data than what was needed, meaning more API calls. Since every endpoint could return only the specified data, developers had to design endpoints keeping the front-end views in mind."}],"markDefs":[],"style":"normal"},{"_key":"5396d443ff5e","_type":"block","children":[{"_key":"5396d443ff5e0","_type":"span","marks":[],"text":"All this resulted in less flexibility, and Facebook engineers decide to build an alternative to REST. GraphQL was built by Facebook in 2012 and was made open source in 2015."}],"markDefs":[],"style":"normal"},{"_key":"a454a349bc88","_type":"block","children":[{"_key":"a454a349bc880","_type":"span","marks":[],"text":"GraphQL describes how you can communicate with a server and transfer data from a client to a server. It differs from REST fundamentally due to the fact that the client can specifically ask what data it needs."}],"markDefs":[],"style":"normal"},{"_key":"bbeed4bfb848","_type":"block","children":[{"_key":"bbeed4bfb8480","_type":"span","marks":[],"text":"GraphQL makes it easy to source and aggregate data from multiple sources. Instead of multiple endpoints, you had a “smart” endpoint that can collect complicated queries and present the output in whatever format the client requires."}],"markDefs":[],"style":"normal"},{"_key":"a492bc9d9499","_type":"block","children":[{"_key":"a492bc9d94990","_type":"span","marks":[],"text":"We will tell it to you with the help of a metaphor. Imagine you have to order food from your cafe, buy groceries, and borrow a book from a library. With REST, you will be making three different phone calls, which are three requests."}],"markDefs":[],"style":"normal"},{"_key":"e76512eaf0ee","_type":"customImage","asset":{"_ref":"image-c98ee78e6949925ddfdb86213c6bbc2d7e7942bd-700x700-png","_type":"reference"}},{"_key":"592c9d88115e","_type":"block","children":[{"_key":"592c9d88115e0","_type":"span","marks":[],"text":"With GraphQL, these three phone calls can be replaced by a single one, like talking to Siri. All you have to do is tell the address to these places, and then place your order (“fetch me a Cappucino, a loaf of bread, and a copy of today’s Herald.”)"}],"markDefs":[],"style":"normal"},{"_key":"b171dc2193db","_type":"customImage","asset":{"_ref":"image-11b77a10f38dec1361bbc9910c2b1a85a5efe456-700x700-png","_type":"reference"}},{"_key":"95db1109cc9a","_type":"block","children":[{"_key":"95db1109cc9a0","_type":"span","marks":[],"text":"This is a very rudimentary way to look at how GraphQL works, but it serves the purpose. We will now see how GraphQL and REST are similar."}],"markDefs":[],"style":"normal"},{"_key":"5ce90b781182","_type":"block","children":[{"_key":"5ce90b7811820","_type":"span","marks":[],"text":"Similarities between GraphQL and REST"}],"markDefs":[],"style":"h2"},{"_key":"85754de54eaa","_type":"block","children":[{"_key":"85754de54eaa0","_type":"span","marks":[],"text":"GraphQL and REST essentially accomplish the same task, i.e., communicate with a server and retrieve data. Here are a few similarities between the two:"}],"markDefs":[],"style":"normal"},{"_key":"00c3c6fe9d92","_type":"block","children":[{"_key":"00c3c6fe9d920","_type":"span","marks":[],"text":"Both GraphQL and REST are based on the concept of a resource, and they specify IDs for those resources."}],"level":1,"listItem":"bullet","markDefs":[],"style":"normal"},{"_key":"9ffeadd7a0cd","_type":"block","children":[{"_key":"9ffeadd7a0cd0","_type":"span","marks":[],"text":"Both GraphQL and REST rely on frameworks and libraries to handle the tiny networking details."}],"level":1,"listItem":"bullet","markDefs":[],"style":"normal"},{"_key":"7cdacdb74fba","_type":"block","children":[{"_key":"7cdacdb74fba0","_type":"span","marks":[],"text":"Both can differentiate if an API request is intended to read data or write it."}],"level":1,"listItem":"bullet","markDefs":[],"style":"normal"},{"_key":"b0462f3962b3","_type":"block","children":[{"_key":"b0462f3962b30","_type":"span","marks":[],"text":"Endpoints in REST API are similar to the list of fields on Query and Mutation types in GraphQL."}],"level":1,"listItem":"bullet","markDefs":[],"style":"normal"},{"_key":"21044d38a668","_type":"block","children":[{"_key":"21044d38a6680","_type":"span","marks":[],"text":"Where does GraphQL far better than REST"}],"markDefs":[],"style":"h2"},{"_key":"0a36f2f5c5f1","_type":"block","children":[{"_key":"0a36f2f5c5f10","_type":"span","marks":[],"text":"We have seen how GraphQL and REST are almost similar, but GraphQL does score a few brownie points over REST. These include situations like Over-fetching and Under-fetching of data and faster Front-end development. Let us take a look at these in detail."}],"markDefs":[],"style":"normal"},{"_key":"829c115c0bf8","_type":"block","children":[{"_key":"829c115c0bf80","_type":"span","marks":[],"text":"Take a simple blog as an example. If you want to show all the latest posts on the front page, your REST query will look like this:"}],"markDefs":[],"style":"normal"},{"_key":"e7bda0754190","_type":"customImage","asset":{"_ref":"image-8d5476f3636ab0c14eb77cd703a9243935dc8507-700x642-png","_type":"reference"}},{"_key":"afdca18da675","_type":"block","children":[{"_key":"afdca18da6750","_type":"span","marks":[],"text":"Now, if you want to return the author as well, you have three methods in REST."}],"markDefs":[],"style":"normal"},{"_key":"fc183d34a466","_type":"block","children":[{"_key":"fc183d34a4660","_type":"span","marks":[],"text":"The first method is to fetch the authors from another resource."}],"markDefs":[],"style":"normal"},{"_key":"c3eef10b8d9e","_type":"block","children":[{"_key":"c3eef10b8d9e0","_type":"span","marks":[],"text":"The code to accomplish this task will look like this:"}],"markDefs":[],"style":"normal"},{"_key":"50c192a10484","_type":"customImage","asset":{"_ref":"image-cabd3be5291a7a1efa4891178e7b46b2bbcd947f-700x524-png","_type":"reference"}},{"_key":"758cd062151b","_type":"block","children":[{"_key":"758cd062151b0","_type":"span","marks":["strong"],"text":"1. UNDER-FETCHING"}],"markDefs":[],"style":"h3"},{"_key":"c99c9462e9f6","_type":"block","children":[{"_key":"c99c9462e9f60","_type":"span","marks":[],"text":"If you use the above method, you will have made two server requests instead of one. This may not look like a problem at this stage, but as you continue to scale the app, there will be multiple requests to the server to different endpoints in order to fetch all the data."}],"markDefs":[],"style":"normal"},{"_key":"76181d4b5578","_type":"block","children":[{"_key":"76181d4b55780","_type":"span","marks":[],"text":"The REST API endpoint may not have all the data that an application needs, and so it doesn’t get everything the application needs in one data fetching exercise. This is called under-fetching."}],"markDefs":[],"style":"normal"},{"_key":"9878b00cfdf4","_type":"block","children":[{"_key":"9878b00cfdf40","_type":"span","marks":[],"text":"Meanwhile, if you use GraphQL to solve the same problem, the code will look like this."}],"markDefs":[],"style":"normal"},{"_key":"2f8f0e8a0af7","_type":"customImage","asset":{"_ref":"image-963239be6c9f87fc84562ec4d82960cb673a5c65-700x592-png","_type":"reference"}},{"_key":"d3fa78fd3b8c","_type":"block","children":[{"_key":"d3fa78fd3b8c0","_type":"span","marks":[],"text":"As you can see, there is only one request to the server, and there are no multiple round trips to slow down the server. This is one of the prime benefits of GraphQL."}],"markDefs":[],"style":"normal"},{"_key":"83e249eead04","_type":"block","children":[{"_key":"83e249eead040","_type":"span","marks":["strong"],"text":"2. OVER- FETCHING"}],"markDefs":[],"style":"h3"},{"_key":"aa8c8c00563e","_type":"block","children":[{"_key":"aa8c8c00563e0","_type":"span","marks":[],"text":"Another method to retrieve the author’s data in REST is to modify the resource also to return the author."}],"markDefs":[],"style":"normal"},{"_key":"0e588eab2809","_type":"block","children":[{"_key":"0e588eab28090","_type":"span","marks":[],"text":"The code for accomplishing this in REST will look like:"}],"markDefs":[],"style":"normal"},{"_key":"6895c669d964","_type":"customImage","asset":{"_ref":"image-4db8da87ab77b6625f08796d8d420ef79bd36fd8-700x670-png","_type":"reference"}},{"_key":"87bf3aa96e3d","_type":"block","children":[{"_key":"87bf3aa96e3d0","_type":"span","marks":[],"text":"Changing this resource may have a secondary effect at another place in your application, something you may not have considered."}],"markDefs":[],"style":"normal"},{"_key":"35a78a272b51","_type":"block","children":[{"_key":"35a78a272b510","_type":"span","marks":[],"text":"If you want to add a sidebar in the case of our blog, that also shows the top monthly posts with their titles, subtitles, and date, using the resource "},{"_key":"35a78a272b511","_type":"span","marks":["strong"],"text":"/api/posts"},{"_key":"35a78a272b512","_type":"span","marks":[],"text":" we created earlier."}],"markDefs":[],"style":"normal"},{"_key":"2108e27eccce","_type":"block","children":[{"_key":"2108e27eccce0","_type":"span","marks":[],"text":"We have modified this resource, and now the sidebar shows the author as well, which we don’t need. This fetching of useless data is a major concern for users who have limited data plans."}],"markDefs":[],"style":"normal"},{"_key":"239f2283c310","_type":"block","children":[{"_key":"239f2283c3100","_type":"span","marks":[],"text":"GraphQL, on the other hand, fetches only the data that we need, so a GraphQL query to solve this problem will look like"}],"markDefs":[],"style":"normal"},{"_key":"b4048f52f0ef","_type":"customImage","asset":{"_ref":"image-9aa769443d82bbd927f8e0f2a7550b80764cef3a-654x461-png","_type":"reference"}},{"_key":"40a97e8081d9","_type":"block","children":[{"_key":"40a97e8081d90","_type":"span","marks":[],"text":"As you can see, even if we add a sidebar, this query will return only the required data."}],"markDefs":[],"style":"normal"},{"_key":"8af3cb2f5df3","_type":"block","children":[{"_key":"8af3cb2f5df30","_type":"span","marks":[],"text":"Apart from data fetching, GraphQL also speeds up development on the front end."}],"markDefs":[],"style":"normal"},{"_key":"2ada366b1a79","_type":"block","children":[{"_key":"2ada366b1a790","_type":"span","marks":["strong"],"text":"3. FASTER FRONT-END DEVELOPMENT"}],"markDefs":[],"style":"h3"},{"_key":"73b8d05e861e","_type":"block","children":[{"_key":"73b8d05e861e0","_type":"span","marks":[],"text":"There is a third way to solve the problem of retrieving posts with the relevant author’s name, which can be done in REST by creating a new resource that returns the posts with the author."}],"markDefs":[],"style":"normal"},{"_key":"9647c565b143","_type":"block","children":[{"_key":"9647c565b1430","_type":"span","marks":[],"text":"So to create a new resource, the code in REST will look like:"}],"markDefs":[],"style":"normal"},{"_key":"e12cf38a9c6e","_type":"customImage","asset":{"_ref":"image-c279e074831f713e5c3d2afc6e0586affcddd9d9-700x686-png","_type":"reference"}},{"_key":"c74d161f506f","_type":"block","children":[{"_key":"c74d161f506f0","_type":"span","marks":[],"text":"But the problem with this approach is that each new specific view needs a specific endpoint. When the view needs a new data, the development has to slow down until you update the endpoint."}],"markDefs":[],"style":"normal"},{"_key":"7343653944da","_type":"block","children":[{"_key":"7343653944da0","_type":"span","marks":[],"text":"This problem can be overcome by GraphQL since it fetches only the required data."}],"markDefs":[],"style":"normal"},{"_key":"ed8f86d9b56c","_type":"block","children":[{"_key":"ed8f86d9b56c0","_type":"span","marks":[],"text":"Nothing slows down. All you have to do is add a new field to the existing query. So the GraphQL code to accomplish this will look like:"}],"markDefs":[],"style":"normal"},{"_key":"bf5c38282f36","_type":"customImage","asset":{"_ref":"image-39627d4e194bd4a157cd74b712b0a52074ca518c-700x598-png","_type":"reference"}},{"_key":"cbc4fbae7832","_type":"block","children":[{"_key":"cbc4fbae78320","_type":"span","marks":[],"text":"As you can see, all we did was add a couple of lines to the existing GraphQL code."}],"markDefs":[],"style":"normal"},{"_key":"330ae027fbab","_type":"block","children":[{"_key":"330ae027fbab0","_type":"span","marks":[],"text":"The client has much more freedom with the data fetched using GraphQL, so we can get around developing our page much faster."}],"markDefs":[],"style":"normal"},{"_key":"dbb8c240a447","_type":"block","children":[{"_key":"dbb8c240a4470","_type":"span","marks":[],"text":"Where does REST still hold its mettle?"}],"markDefs":[],"style":"h2"},{"_key":"14eee2b04f65","_type":"block","children":[{"_key":"14eee2b04f650","_type":"span","marks":[],"text":"While we have stated all the benefits of GraphQL, there are a few benefits of using REST that also deserve mention."}],"markDefs":[],"style":"normal"},{"_key":"d9433568bb36","_type":"block","children":[{"_key":"d9433568bb360","_type":"span","marks":[],"text":"These advantages include:"}],"markDefs":[],"style":"normal"},{"_key":"ca54532889ef","_type":"block","children":[{"_key":"ca54532889ef0","_type":"span","marks":["strong"],"text":"Code vulnerability in GraphQL:"},{"_key":"ca54532889ef1","_type":"span","marks":[],"text":" GraphQL lets you retrieve the exact data that you want from the server, which leads to a tricky security issue. If an attacker wants to carry out a DDoS (Denial-of-service-attack) to an unprotected server, all he has to do is execute an expensive nested query to overload your server. This is not the case with REST, where you use separate HTTP calls to extract data."}],"level":1,"listItem":"bullet","markDefs":[],"style":"normal"},{"_key":"ee65e5b99082","_type":"block","children":[{"_key":"ee65e5b990820","_type":"span","marks":["strong"],"text":"Error Reporting:"},{"_key":"ee65e5b990821","_type":"span","marks":[],"text":" With REST, you can use API responses and build a monitoring system for error messages. But error reporting in GraphQL leaves a lot to be desired, with the ubiquitous “200 K Error — Something went wrong” message."}],"level":1,"listItem":"bullet","markDefs":[],"style":"normal"},{"_key":"53a49e7b93e2","_type":"block","children":[{"_key":"53a49e7b93e20","_type":"span","marks":["strong"],"text":"HTTP caching issue:"},{"_key":"53a49e7b93e21","_type":"span","marks":[],"text":" HTTP caches are used by modern browsers to identify resources and make sure no two resources are the same and avoid refetching. With GraphQL, there is no way to use a universal identifier because we use the same URL for all the requests. You have to set up your own cache in GraphQL, which is tiresome."}],"level":1,"listItem":"bullet","markDefs":[],"style":"normal"},{"_key":"93ac00a24881","_type":"block","children":[{"_key":"93ac00a248810","_type":"span","marks":[],"text":"Now that you have seen both the pros and cons of GraphQL and REST, you might have a question that many developers face."}],"markDefs":[],"style":"normal"},{"_key":"e01894753090","_type":"block","children":[{"_key":"e018947530900","_type":"span","marks":["strong"],"text":"Which among GraphQL and REST should I use to build my website?"}],"markDefs":[],"style":"h2"},{"_key":"dfa5e7c2ab93","_type":"block","children":[{"_key":"dfa5e7c2ab930","_type":"span","marks":[],"text":"The answer is highly subjective and depends on a host of factors."}],"markDefs":[],"style":"normal"},{"_key":"cc561ede5641","_type":"block","children":[{"_key":"cc561ede56410","_type":"span","marks":[],"text":"If your API is intended to be used on a mobile application, use GraphQL since it offers better bandwidth usage."}],"markDefs":[],"style":"normal"},{"_key":"6ceab8c6db38","_type":"block","children":[{"_key":"6ceab8c6db380","_type":"span","marks":[],"text":"If you need caching and monitoring facilities in your API, use REST."}],"markDefs":[],"style":"normal"},{"_key":"fa9b7726c562","_type":"block","children":[{"_key":"fa9b7726c5620","_type":"span","marks":[],"text":"This being said, you can also use a combination of GraphQL and REST for a project. It all depends on your data and performance requirements. To make matters clear, get in touch with us here at SoluteLabs, and we would love to set up a discovery meeting."}],"markDefs":[],"style":"normal"}],"_rawFaq":null,"publishedAt":"2020-07-30T18:30:00.000Z","_updatedAt":"2021-04-08T13:29:41Z","readingTime":"8 min read","altTagMainImage":null,"titleMetaData":null,"shortanchorlinkh2":[{"h2link":"REST — is History?","h2shorttext":"REST"},{"h2link":"GraphQL — Better than the REST?","h2shorttext":"GraphQL"},{"h2link":"Similarities between GraphQL and REST","h2shorttext":"Similarities"},{"h2link":"Where does GraphQL far better than REST","h2shorttext":"Where GraphQL is better"},{"h2link":"Where does REST still hold its mettle?","h2shorttext":"Where does REST still hold"},{"h2link":"Which among GraphQL and REST should I use to build my website?","h2shorttext":"GraphQL or REST"}],"categories":[{"id":"61b2fbb3-23c5-54d6-aac3-bf8ba2dcecc3","title":"Blog"}],"mainImage":{"asset":{"id":"image-040066ba6fde77015018ce05547a8b269e13b535-2240x1260-png","url":"https://cdn.sanity.io/images/ay6gmb6r/production/040066ba6fde77015018ce05547a8b269e13b535-2240x1260.png","fluid":{"sizes":"(max-width: 800px) 100vw, 800px","src":"https://cdn.sanity.io/images/ay6gmb6r/production/040066ba6fde77015018ce05547a8b269e13b535-2240x1260.png?w=800&h=450&fit=crop","srcSet":"https://cdn.sanity.io/images/ay6gmb6r/production/040066ba6fde77015018ce05547a8b269e13b535-2240x1260.png?w=200&h=113&fit=crop 200w,\nhttps://cdn.sanity.io/images/ay6gmb6r/production/040066ba6fde77015018ce05547a8b269e13b535-2240x1260.png?w=400&h=225&fit=crop 400w,\nhttps://cdn.sanity.io/images/ay6gmb6r/production/040066ba6fde77015018ce05547a8b269e13b535-2240x1260.png?w=800&h=450&fit=crop 800w,\nhttps://cdn.sanity.io/images/ay6gmb6r/production/040066ba6fde77015018ce05547a8b269e13b535-2240x1260.png?w=1200&h=675&fit=crop 1200w,\nhttps://cdn.sanity.io/images/ay6gmb6r/production/040066ba6fde77015018ce05547a8b269e13b535-2240x1260.png?w=1600&h=900&fit=crop 1600w,\nhttps://cdn.sanity.io/images/ay6gmb6r/production/040066ba6fde77015018ce05547a8b269e13b535-2240x1260.png 2240w"}}},"author":{"id":"780e00bb-49c6-5f31-ad2d-768357e65bf4","name":"Prakash Donga","myColor":{"hex":"#1641ff"},"image":{"asset":{"_id":"image-5fa227c799916ce02aaafe34f12cf1d1ef813e2f-288x288-png","assetId":"5fa227c799916ce02aaafe34f12cf1d1ef813e2f","_type":"sanity.imageAsset","id":"image-5fa227c799916ce02aaafe34f12cf1d1ef813e2f-288x288-png"},"_type":"image","_key":null},"slug":{"current":"prakash-donga"}},"slug":{"current":"graphql-vs-rest-which-one-to-choose-when"},"tags":[{"id":"799cf619-9d77-5a2b-8ca5-7daf6bccd7a6","slug":{"current":"javascript"},"title":"Javascript Development"},{"id":"9b4c8e06-fe1d-54a8-b141-e28cfa915336","slug":{"current":"web-development"},"title":"Web Development"}],"referenceBlogPost":[{"mainImage":{"asset":{"id":"image-1cb2bba7fcb8a95bce85e08f333e94c653fa8f7f-2240x1260-png","fluid":{"src":"https://cdn.sanity.io/images/ay6gmb6r/production/1cb2bba7fcb8a95bce85e08f333e94c653fa8f7f-2240x1260.png?w=800&h=450&fit=crop","srcSet":"https://cdn.sanity.io/images/ay6gmb6r/production/1cb2bba7fcb8a95bce85e08f333e94c653fa8f7f-2240x1260.png?w=200&h=113&fit=crop 200w,\nhttps://cdn.sanity.io/images/ay6gmb6r/production/1cb2bba7fcb8a95bce85e08f333e94c653fa8f7f-2240x1260.png?w=400&h=225&fit=crop 400w,\nhttps://cdn.sanity.io/images/ay6gmb6r/production/1cb2bba7fcb8a95bce85e08f333e94c653fa8f7f-2240x1260.png?w=800&h=450&fit=crop 800w,\nhttps://cdn.sanity.io/images/ay6gmb6r/production/1cb2bba7fcb8a95bce85e08f333e94c653fa8f7f-2240x1260.png?w=1200&h=675&fit=crop 1200w,\nhttps://cdn.sanity.io/images/ay6gmb6r/production/1cb2bba7fcb8a95bce85e08f333e94c653fa8f7f-2240x1260.png?w=1600&h=900&fit=crop 1600w,\nhttps://cdn.sanity.io/images/ay6gmb6r/production/1cb2bba7fcb8a95bce85e08f333e94c653fa8f7f-2240x1260.png 2240w","sizes":"(max-width: 800px) 100vw, 800px"}}},"publishedAt":"2020-06-25T18:30:00.000Z","readingTime":"7 min read","author":{"name":"Krupa Suthar"},"slug":{"current":"top-8-node-js-frameworks-to-look"},"title":"Top 8 Node.JS Frameworks to Look at in 2020"},{"mainImage":{"asset":{"id":"image-19f5486e08abd93a6b9ff5f372c692496c33e0f6-2240x1260-png","fluid":{"src":"https://cdn.sanity.io/images/ay6gmb6r/production/19f5486e08abd93a6b9ff5f372c692496c33e0f6-2240x1260.png?w=800&h=450&fit=crop","srcSet":"https://cdn.sanity.io/images/ay6gmb6r/production/19f5486e08abd93a6b9ff5f372c692496c33e0f6-2240x1260.png?w=200&h=113&fit=crop 200w,\nhttps://cdn.sanity.io/images/ay6gmb6r/production/19f5486e08abd93a6b9ff5f372c692496c33e0f6-2240x1260.png?w=400&h=225&fit=crop 400w,\nhttps://cdn.sanity.io/images/ay6gmb6r/production/19f5486e08abd93a6b9ff5f372c692496c33e0f6-2240x1260.png?w=800&h=450&fit=crop 800w,\nhttps://cdn.sanity.io/images/ay6gmb6r/production/19f5486e08abd93a6b9ff5f372c692496c33e0f6-2240x1260.png?w=1200&h=675&fit=crop 1200w,\nhttps://cdn.sanity.io/images/ay6gmb6r/production/19f5486e08abd93a6b9ff5f372c692496c33e0f6-2240x1260.png?w=1600&h=900&fit=crop 1600w,\nhttps://cdn.sanity.io/images/ay6gmb6r/production/19f5486e08abd93a6b9ff5f372c692496c33e0f6-2240x1260.png 2240w","sizes":"(max-width: 800px) 100vw, 800px"}}},"publishedAt":"2020-05-07T18:30:00.000Z","readingTime":"9 min read","author":{"name":"Prakash Donga"},"slug":{"current":"top-10-headless-ecommerce-websites-built-on-jamstack"},"title":"Top 10 Headless eCommerce Websites built on JAMstack  "}]},"readNextBlog":[{"mainImage":{"asset":{"id":"image-1cb2bba7fcb8a95bce85e08f333e94c653fa8f7f-2240x1260-png","fluid":{"src":"https://cdn.sanity.io/images/ay6gmb6r/production/1cb2bba7fcb8a95bce85e08f333e94c653fa8f7f-2240x1260.png?w=800&h=450&fit=crop","srcSet":"https://cdn.sanity.io/images/ay6gmb6r/production/1cb2bba7fcb8a95bce85e08f333e94c653fa8f7f-2240x1260.png?w=200&h=113&fit=crop 200w,\nhttps://cdn.sanity.io/images/ay6gmb6r/production/1cb2bba7fcb8a95bce85e08f333e94c653fa8f7f-2240x1260.png?w=400&h=225&fit=crop 400w,\nhttps://cdn.sanity.io/images/ay6gmb6r/production/1cb2bba7fcb8a95bce85e08f333e94c653fa8f7f-2240x1260.png?w=800&h=450&fit=crop 800w,\nhttps://cdn.sanity.io/images/ay6gmb6r/production/1cb2bba7fcb8a95bce85e08f333e94c653fa8f7f-2240x1260.png?w=1200&h=675&fit=crop 1200w,\nhttps://cdn.sanity.io/images/ay6gmb6r/production/1cb2bba7fcb8a95bce85e08f333e94c653fa8f7f-2240x1260.png?w=1600&h=900&fit=crop 1600w,\nhttps://cdn.sanity.io/images/ay6gmb6r/production/1cb2bba7fcb8a95bce85e08f333e94c653fa8f7f-2240x1260.png 2240w","sizes":"(max-width: 800px) 100vw, 800px"}}},"publishedAt":"2020-06-25T18:30:00.000Z","readingTime":"7 min read","author":{"name":"Krupa Suthar"},"slug":{"current":"top-8-node-js-frameworks-to-look"},"title":"Top 8 Node.JS Frameworks to Look at in 2020"},{"mainImage":{"asset":{"id":"image-19f5486e08abd93a6b9ff5f372c692496c33e0f6-2240x1260-png","fluid":{"src":"https://cdn.sanity.io/images/ay6gmb6r/production/19f5486e08abd93a6b9ff5f372c692496c33e0f6-2240x1260.png?w=800&h=450&fit=crop","srcSet":"https://cdn.sanity.io/images/ay6gmb6r/production/19f5486e08abd93a6b9ff5f372c692496c33e0f6-2240x1260.png?w=200&h=113&fit=crop 200w,\nhttps://cdn.sanity.io/images/ay6gmb6r/production/19f5486e08abd93a6b9ff5f372c692496c33e0f6-2240x1260.png?w=400&h=225&fit=crop 400w,\nhttps://cdn.sanity.io/images/ay6gmb6r/production/19f5486e08abd93a6b9ff5f372c692496c33e0f6-2240x1260.png?w=800&h=450&fit=crop 800w,\nhttps://cdn.sanity.io/images/ay6gmb6r/production/19f5486e08abd93a6b9ff5f372c692496c33e0f6-2240x1260.png?w=1200&h=675&fit=crop 1200w,\nhttps://cdn.sanity.io/images/ay6gmb6r/production/19f5486e08abd93a6b9ff5f372c692496c33e0f6-2240x1260.png?w=1600&h=900&fit=crop 1600w,\nhttps://cdn.sanity.io/images/ay6gmb6r/production/19f5486e08abd93a6b9ff5f372c692496c33e0f6-2240x1260.png 2240w","sizes":"(max-width: 800px) 100vw, 800px"}}},"publishedAt":"2020-05-07T18:30:00.000Z","readingTime":"9 min read","author":{"name":"Prakash Donga"},"slug":{"current":"top-10-headless-ecommerce-websites-built-on-jamstack"},"title":"Top 10 Headless eCommerce Websites built on JAMstack  "}],"blogSLug":"graphql-vs-rest-which-one-to-choose-when"}},"staticQueryHashes":["1951403926","2015784780","2763451262","3649515864","3810076356","4118766420"]}