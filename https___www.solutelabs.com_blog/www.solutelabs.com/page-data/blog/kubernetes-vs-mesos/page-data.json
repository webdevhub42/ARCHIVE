{"componentChunkName":"component---src-components-blogs-blog-detail-js","path":"/blog/kubernetes-vs-mesos","result":{"pageContext":{"post":{"id":"6eea75ac-bb6d-5b91-bfea-52583bcc6a6b","title":"Kubernetes vs Mesos: Comparison of Container Orchestration","excerpt":"Kubernetes vs Mesos: Find out differences between Kubernetes & Mesos as two container orchestration tools for containerization & using them on Azure, AWS.","_rawBody":[{"_key":"60184098423a","_type":"block","children":[{"_key":"0cfcd1c365b8","_type":"span","marks":[],"text":"What is a container?"}],"markDefs":[],"style":"h2"},{"_key":"33b070def439","_type":"block","children":[{"_key":"c6ed024444980","_type":"span","marks":[],"text":"If you are an application developer or a system administrator in the 21st century you have probably come across the term "},{"_key":"c6ed024444981","_type":"span","marks":["strong"],"text":"containers"},{"_key":"c6ed024444982","_type":"span","marks":[],"text":". The container is nothing but an entity that comprises software packages tightly bundled together which can execute your code in an isolated environment. Unlike virtual machines which virtualize hardware resources to run multiple operating systems, containers virtualize the operating system to run multiple workloads on a single OS."}],"markDefs":[],"style":"normal"},{"_key":"0709c417fd53","_type":"customImage","alt":"What is a container?","asset":{"_ref":"image-6a39ffe83ffa7f943921d9cd7c0a687d186a3817-421x541-png","_type":"reference"}},{"_key":"540a8dcd2d2e","_type":"block","children":[{"_key":"8d4b94c1bd0d","_type":"span","marks":[],"text":"Now, just like in a production environment running a single VM instance is not enough to host your application, similarly, you need to manage multiple container instances in order to fulfill your microservice needs and get your application running. This can be very stressful and managing, monitoring and scaling 100s of containers can be a disaster when not done right. To manage your application well and provide 24X7 availability you need to think beyond just running your code in containers."}],"markDefs":[],"style":"normal"},{"_key":"64926100cd69","_type":"block","children":[{"_key":"89622ca2d7320","_type":"span","marks":[],"text":"This is exactly where "},{"_key":"89622ca2d7321","_type":"span","marks":["strong"],"text":"container orchestration"},{"_key":"89622ca2d7322","_type":"span","marks":[],"text":" tools like "},{"_key":"89622ca2d7323","_type":"span","marks":["strong"],"text":"Kubernetes"},{"_key":"89622ca2d7324","_type":"span","marks":[],"text":" and "},{"_key":"89622ca2d7325","_type":"span","marks":["strong"],"text":"Mesos"},{"_key":"89622ca2d7326","_type":"span","marks":[],"text":" fit in!"}],"markDefs":[],"style":"normal"},{"_key":"913c94746004","_type":"block","children":[{"_key":"c2f81d632e900","_type":"span","marks":[],"text":"What is a container orchestrator and why do you need it?"}],"markDefs":[],"style":"h2"},{"_key":"66decbc0bacd","_type":"customImage","alt":"What is a container orchestrator and why do you need it?","asset":{"_ref":"image-906bd52454a55097622d53eb4a3355508fc7a73a-191x241-png","_type":"reference"}},{"_key":"1707e666eff6","_type":"customBlockQuote","customblockArray":[{"_key":"0ade293e3f50","_type":"block","children":[{"_key":"a11213bfc3cf","_type":"span","marks":[],"text":"· Container orchestrator is a tool that monitors and manages the complete lifecycle of your containers right from bringing it into the running stage until gracefully terminating your code and shutting down your container"}],"markDefs":[],"style":"normal"},{"_key":"c450718be230","_type":"block","children":[{"_key":"ebd2fa3bb9c40","_type":"span","marks":[],"text":"· These tools probe for container’s health and keeps in check for application code running in your container"}],"markDefs":[],"style":"normal"},{"_key":"5a975fe922ef","_type":"block","children":[{"_key":"301ad5424d940","_type":"span","marks":[],"text":"· In case of higher loads, these tools can efficiently scale out your application code to cater from 100 clients to millions of clients without any downtime"}],"markDefs":[],"style":"normal"}]},{"_key":"ef0d3990541d","_type":"block","children":[{"_key":"18d45c86594a","_type":"span","marks":[],"text":"Unlike Docker which has been the undefeated platform for running containers, there are various orchestration tools that are available in market to cater to different needs as per your application’s current workflow and future needs. Today we take a look at two of the world’s most widely adopted and versatile orchestration tools: Kubernetes and Mesos, and which suits your application’s needs and meets your future demands the best."}],"markDefs":[],"style":"normal"},{"_key":"e60fae342bc8","_type":"block","children":[{"_key":"ecaa5d5c64b7","_type":"span","marks":[],"text":"Overview of Kubernetes"}],"markDefs":[],"style":"h2"},{"_key":"a194447f3a07","_type":"customImage","alt":"Overview of Kubernetes","asset":{"_ref":"image-17187b7e4b2cf3ec46236295e1a5298a04ddd2a3-569x619-png","_type":"reference"}},{"_key":"8dc0597202a4","_type":"block","children":[{"_key":"4c58c534cd1f","_type":"span","marks":[],"text":"Kubernetes is an open-source container orchestration tool developed by "},{"_key":"1504d53a2e71","_type":"span","marks":["strong"],"text":"Google"},{"_key":"c62889ea49a1","_type":"span","marks":[],"text":" and currently managed by "},{"_key":"edeafccc5cb9","_type":"span","marks":["strong"],"text":"Cloud Native Computing Foundation"},{"_key":"7c33356d169f","_type":"span","marks":[],"text":". Kubernetes provides container deployment, scalability, and management services, along with an exposed API core which enables developers to directly interact with Kubernetes control plane nodes to manage, create, configure Kubernetes clusters and integrate their systems with its core seamlessly."}],"markDefs":[],"style":"normal"},{"_key":"cd99aae9251f","_type":"block","children":[{"_key":"9a72d159d1a00","_type":"span","marks":[],"text":"Overview of Mesos"}],"markDefs":[],"style":"h2"},{"_key":"a4689eb53890","_type":"customImage","alt":"Overview of Mesos","asset":{"_ref":"image-201feb811d58a2a02ea8baae41eb3cdfa4c99ca7-836x563-png","_type":"reference"}},{"_key":"dd7ad8d744cf","_type":"block","children":[{"_key":"42001c1a6871","_type":"span","marks":[],"text":"Mesos is an open-source cluster manager developed originally by UC Berkeley and currently owned by Apache. It is designed to handle both types of workloads, containerized or non-containerized running on distributed systems. Mesos marathon is the framework that enables container runtime in a Mesos cluster."}],"markDefs":[],"style":"normal"},{"_key":"29311ad0cced","_type":"block","children":[{"_key":"9a45408ddfa90","_type":"span","marks":[],"text":"Kubernetes vs. Mesos"}],"markDefs":[],"style":"h2"},{"_key":"cbb59e169a20","_type":"block","children":[{"_key":"45bcb2691f350","_type":"span","marks":[],"text":"After having a brief look at Kubernetes and Mesos architecture diagram and some features, let’s now compare them in detail and choose the right one for your application workload."}],"markDefs":[],"style":"normal"},{"_key":"cd083671a37d","_type":"block","children":[{"_key":"2fc64f091bea0","_type":"span","marks":[],"text":"1. Architecture"}],"markDefs":[],"style":"h3"},{"_key":"ee34250b8ce6","_type":"block","children":[{"_key":"8e93283a3d890","_type":"span","marks":[],"text":"Kubernetes cluster comprises of two types of nodes: master and slave. Each node runs a specific set of services in order to form a cluster and provide a container orchestration platform."}],"markDefs":[],"style":"normal"},{"_key":"5c59ff7e5738","_type":"customBlockQuote","customblockArray":[{"_key":"741483514784","_type":"block","children":[{"_key":"8c04e2ed6a77","_type":"span","marks":["strong"],"text":"Master nodes:"},{"_key":"0d0f981bebb7","_type":"span","marks":[],"text":" these nodes are responsible for maintaining the state of the clusters and controls all the nodes in the cluster. Master nodes contain backed up cluster state in key-value store known as ETCD which can be setup along with master nodes or maintained separately on different nodes. Master node runs three major processes which are kube-apiserver, kube-scheduler and kube-controller-manager."}],"markDefs":[],"style":"normal"},{"_key":"2c893695c7be","_type":"block","children":[{"_key":"47dce4272f710","_type":"span","marks":["strong"],"text":"Slave nodes:"},{"_key":"47dce4272f711","_type":"span","marks":[],"text":" these nodes are responsible for running your workload in containerized environment with help of these three major services namely kubelet, kube-proxy and container runtime(Docker preferably)."}],"markDefs":[],"style":"normal"}]},{"_key":"46bac7ce9cdf","_type":"block","children":[{"_key":"b2ac33a94d94","_type":"span","marks":[],"text":"Mesos cluster comprises of master nodes and slave nodes, where master nodes are selected from a Quorum managed by zookeeper and slaves running Mesos agent for running the application workloads."}],"markDefs":[],"style":"normal"},{"_key":"a14fe72151bc","_type":"customBlockQuote","customblockArray":[{"_key":"f2f967d4dbcc","_type":"block","children":[{"_key":"cac376947830","_type":"span","marks":[],"text":"Master nodes in Mesos cluster are broadcasted with resources available by Mesos agent nodes and as per the tasks registered by schedulers a master nodes assigns the workload to the slave nodes which run the Mesos Executors."}],"markDefs":[],"style":"normal"}]},{"_key":"7a723ba11cec","_type":"block","children":[{"_key":"54bcb380eb8b","_type":"span","marks":["strong"],"text":"2. Workloads"}],"markDefs":[],"style":"h3"},{"_key":"2dac8420fff3","_type":"block","children":[{"_key":"11f95d8795570","_type":"span","marks":[],"text":"As mentioned earlier Kubernetes supports containerized workloads and most popularly is used for Docker containers. Along with Docker, Kubernetes also supports container runtimes like containers and CRI-O."}],"level":1,"listItem":"bullet","markDefs":[],"style":"normal"},{"_key":"5934bc93f07f","_type":"block","children":[{"_key":"178f530722bb0","_type":"span","marks":[],"text":"Contrasting to Kubernetes, Mesos is a framework that supports diverse workloads which can be containerized and non-containerized, where the containerized environment is supported in Mesos by an additional framework known as Marathon."}],"level":1,"listItem":"bullet","markDefs":[],"style":"normal"},{"_key":"4b42052cd48d","_type":"block","children":[{"_key":"3372949d339c0","_type":"span","marks":[],"text":"3. High Availability"}],"markDefs":[],"style":"h3"},{"_key":"25af2b8c0f2a","_type":"block","children":[{"_key":"fdab3f8badfb0","_type":"span","marks":[],"text":"Kubernetes with its support for multiple master and multiple slave configurations provides high availability of workload runtimes. Also, the pods in Kubernetes are distributed over a cluster of worker nodes and hence a node failure is easily managed by moving a workload to another node."}],"level":1,"listItem":"bullet","markDefs":[],"style":"normal"},{"_key":"e94ad52d2f1f","_type":"block","children":[{"_key":"cbc8effa744d0","_type":"span","marks":[],"text":"Mesos can have multiple master and slaves just like Kubernetes where the active master is decided by a quorum of zookeepers, and also Mesos provides high availability by providing multiple Mesos agents for running the distributed workload in a cluster."}],"level":1,"listItem":"bullet","markDefs":[],"style":"normal"},{"_key":"905599ddaaa9","_type":"block","children":[{"_key":"109579e72d610","_type":"span","marks":[],"text":"4. Scaling"}],"markDefs":[],"style":"h3"},{"_key":"cce1d420fbce","_type":"block","children":[{"_key":"550f9a6bfe1e0","_type":"span","marks":[],"text":"In Kubernetes scaling is managed by an entity called Horizontal Pods Autoscaler. As seen in the below example nginx pods are monitored by HPA a have the capability to auto-scale if the load average increases above the set target limit which is 80 for our use case."}],"level":1,"listItem":"bullet","markDefs":[],"style":"normal"},{"_key":"c7e094999aca","_type":"code","code":"NAME           REFERENCE              TARGETS      MINPODS     MAXPODS    REPLICAS\r\nnginx          Deployment/nginx       10%/80%               1                   10                   1"},{"_key":"b2cd0eff4911","_type":"block","children":[{"_key":"99887a233f82","_type":"span","marks":[],"text":"In Mesos, the same is achieved by a scheduling framework that can alter the scale of the application through UI or through application definition."}],"level":1,"listItem":"bullet","markDefs":[],"style":"normal"},{"_key":"5dce2d3ce203","_type":"code","code":"{\r\n\"id\" : \"my app\",\r\n...\r\n\"instances\" : \"10\",\r\n...\r\n}"},{"_key":"5afe7bbaf91e","_type":"block","children":[{"_key":"c44ae3dd148b","_type":"span","marks":[],"text":"5. Failover"}],"markDefs":[],"style":"h3"},{"_key":"b5d8808704ca","_type":"block","children":[{"_key":"82f01f152f570","_type":"span","marks":[],"text":"Nodes, processes, and workload failovers are managed both in Kubernetes as well as Mesos."}],"markDefs":[],"style":"normal"},{"_key":"40a5e1a4a4eb","_type":"block","children":[{"_key":"a76c291dcbfb0","_type":"span","marks":[],"text":"Kubernetes manages application failover with running readiness and liveness checks and can automatically redeploy workloads as and when required. Also, the master election is self-managed in Kubernetes."}],"level":1,"listItem":"bullet","markDefs":[],"style":"normal"},{"_key":"aec9494728a0","_type":"code","code":"...\r\n    livenessProbe:\r\n      failureThreshold: 3\r\n      httpGet:\r\n        path: /health\r\n        port: 8080\r\n        scheme: HTTP\r\n      initialDelaySeconds: 15\r\n      periodSeconds: 30\r\n      successThreshold: 1\r\n      timeoutSeconds: 1\r\n...\r\n...\r\n    readinessProbe:\r\n      failureThreshold: 3\r\n      httpGet:\r\n        path: /health\r\n        port: 8080\r\n        scheme: HTTP\r\n      initialDelaySeconds: 15\r\n      periodSeconds: 30\r\n      successThreshold: 1\r\n      timeoutSeconds: 1\r\n..."},{"_key":"72e0d101bfbd","_type":"block","children":[{"_key":"806c81787ccf","_type":"span","marks":[],"text":"Following is an example of configuring readiness and liveness probes in a pod for monitoring the health stats of an application."}],"level":1,"listItem":"bullet","markDefs":[],"style":"normal"},{"_key":"cac8b7d9de6c","_type":"block","children":[{"_key":"230ce89e9ea10","_type":"span","marks":[],"text":"Likewise in Mesos master nodes failover is managed by "},{"_key":"230ce89e9ea11","_type":"span","marks":["strong"],"text":"zookeeper quorum"},{"_key":"230ce89e9ea12","_type":"span","marks":[],"text":" and the application failovers are monitored by the master nodes which maintains the state by the data published by the Mesos agents running on the worker nodes."}],"level":1,"listItem":"bullet","markDefs":[],"style":"normal"},{"_key":"a6d5f67ff99e","_type":"block","children":[{"_key":"1f46fbe593f8","_type":"span","marks":[],"text":"6. Upgrades and Rollbacks"}],"markDefs":[],"style":"h3"},{"_key":"3c1f98e3825b","_type":"block","children":[{"_key":"0efcc5782c7a0","_type":"span","marks":[],"text":"Kubernetes facilitates up-gradation of application pods through deployment entities where the deployment strategies and scale can be mentioned in the yaml files for unhindered and zero downtime deployments. The rolling back of upgrades in Kubernetes is possible using the kubectl rollback command which requires no editing of yaml files."}],"level":1,"listItem":"bullet","markDefs":[],"style":"normal"},{"_key":"e5db97c5f193","_type":"code","code":"kubectl rollout history deployment/nodejs-app\r\nkubectl rollout undo deployment/nodejs-app --to-revision=99"},{"_key":"274bef9daceb","_type":"block","children":[{"_key":"0064c5fd987a","_type":"span","marks":[],"text":"Mesos also provides the upgrades in an application through a deployment JSON file where 0 downtimes is achieved using the rolling starts feature of Mesos. Unlike Kubernetes, in order to perform rollback in Mesos, the deployment needs to be edited manually to perform rollbacks."}],"level":1,"listItem":"bullet","markDefs":[],"style":"normal"},{"_key":"37b8cbb9ca45","_type":"block","children":[{"_key":"f014541833e00","_type":"span","marks":[],"text":"Marathon adds the property "},{"_key":"f014541833e01","_type":"span","marks":["strong","em"],"text":"minimumHealthCapacity"},{"_key":"f014541833e02","_type":"span","marks":[],"text":" to aid deployment, which when set to 0 deletes all previous deployments when creating a new one, whereas setting the same to 1 runs new deployment prior to deleting the old instances."}],"level":1,"listItem":"bullet","markDefs":[],"style":"normal"},{"_key":"9c1127fd1cf2","_type":"block","children":[{"_key":"0c9cd1a0bc60","_type":"span","marks":[],"text":"7. Persisting Data"}],"markDefs":[],"style":"h3"},{"_key":"0f53e3a2d129","_type":"block","children":[{"_key":"098f25cf1f340","_type":"span","marks":[],"text":"Kubernetes provides persistence of data in its containers by multiple storage solutions. As seen in the architecture diagram Kubernetes provides an entity called Persistent Volumes and its claims which can be linked with a particular pod and hence maintains data completely isolated from the application’s runtime. The solutions which are available and can be integrated with PVCs are Ceph storage, NFS mount points, AWS s3 storage, and many more."}],"level":1,"listItem":"bullet","markDefs":[],"style":"normal"},{"_key":"e6b461b68b69","_type":"code","code":"...\r\n    volumeMounts:\r\n    - mountPath: /usr/share/elasticsearch/data\r\n      name: elasticsearch-data\r\n    - mountPath: /usr/share/elasticsearch/config/certs\r\n      name: elastic-certificates\r\n    - mountPath: /usr/share/elasticsearch/config/elasticsearch.yml\r\n      name: esconfig\r\n      subPath: elasticsearch.yml\r\n...\r\n...\r\n  volumes:\r\n  - name: elasticsearch-data\r\n    persistentVolumeClaim:\r\n      claimName: efk-data-efk-data-0\r\n  - name: elastic-certificates\r\n    secret:\r\n      secretName: elastic-certificates\r\n  - configMap:\r\n      name: efk-data-config\r\n    name: esconfig\r\n..."},{"_key":"f42c72deff2e","_type":"block","children":[{"_key":"ecd54b1f8226","_type":"span","marks":[],"text":"Following is an example of storing data for databases in persistent volumes which can be mounted in pods. In this example, we can see important config files, certificates, and data are mounted using volumes."}],"level":1,"listItem":"bullet","markDefs":[],"style":"normal"},{"_key":"49d0547e76f3","_type":"block","children":[{"_key":"7875bbac63150","_type":"span","marks":[],"text":"Mesos on the other hand to manage the persistence of the data needs to access the physical storage local volumes of the agent on which the application is being run and hence makes it cumbersome for managing data in a cluster."}],"level":1,"listItem":"bullet","markDefs":[],"style":"normal"},{"_key":"590096b1e126","_type":"code","code":"{\r\n  \"container_path\": \"/var/lib/elasticsearch\",\r\n  \"mode\": \"RW\",\r\n  \"source\": {\r\n    \"type\": \"HOST_PATH\",\r\n    \"host_path\": {\r\n      \"path\": \"/usr/src/elasticsearch\"\r\n    }\r\n  }\r\n}"},{"_key":"9a72e5535b20","_type":"block","children":[{"_key":"75b597308a8f","_type":"span","marks":[],"text":"8. Networking"}],"markDefs":[],"style":"h3"},{"_key":"7f696d78dc53","_type":"block","children":[{"_key":"ce3ca553c9e70","_type":"span","marks":[],"text":"Networking in Kubernetes is facilitated by a model which enables all pods and containers in a cluster to interact with each other with their own unique ports. This is possible since Kubernetes create two layers of the network, one for the pods and the other for the services. This helps in emphasizing on security aspect since the networks are unreachable from outside the cluster and enable full-fledged communication between all the application containers."}],"level":1,"listItem":"bullet","markDefs":[],"style":"normal"},{"_key":"81d8c467a27d","_type":"code","code":"apiVersion: v1\r\nkind: Service\r\nmetadata:\r\n  labels:\r\n    release: logstash\r\n  name: logstash\r\nspec:\r\n  ports:\r\n  - name: beats\r\n    port: 5044\r\n    protocol: TCP\r\n    targetPort: 5044\r\n  selector:\r\n    release: logstash\r\n  type: ClusterIP"},{"_key":"a488d900268b","_type":"block","children":[{"_key":"c3f3386a87cf","_type":"span","marks":[],"text":"As seen following code is a definition for mapping an application’s port to a service port in Kubernetes using a yaml file"}],"level":1,"listItem":"bullet","markDefs":[],"style":"normal"},{"_key":"1d105538f3b2","_type":"block","children":[{"_key":"2f1798b3d26c0","_type":"span","marks":[],"text":"Mesos facilitates this implementation by mapping the container ports to the host ports which are limited and is one of the major drawbacks of its architecture. Because of this setup, the containers even in the same cluster cannot communicate with each other."}],"level":1,"listItem":"bullet","markDefs":[],"style":"normal"},{"_key":"83aa58ccffa1","_type":"block","children":[{"_key":"8d425e65f897","_type":"span","marks":[],"text":"Using Kubernetes and Mesos on Azure"}],"markDefs":[],"style":"h2"},{"_key":"d874147c93c2","_type":"block","children":[{"_key":"115f8e852e9f0","_type":"span","marks":[],"text":"Kubernetes on Azure offers a serverless Kubernetes experience with a wide variety of plugins available for setting up CI/CD and securely exposing your applications over the internet."}],"level":1,"listItem":"bullet","markDefs":[],"style":"normal"},{"_key":"61e31e606cd3","_type":"block","children":[{"_key":"2cf02aefbca20","_type":"span","marks":[],"text":"Mesos on Azure is offered as Mesosphere DC/OS service which provides complete cluster manager services with a Web UI for controlling over 10,000 nodes in a cluster."}],"level":1,"listItem":"bullet","markDefs":[],"style":"normal"},{"_key":"2b86d26e1837","_type":"block","children":[{"_key":"12de5606eaff0","_type":"span","marks":[],"text":"The primary competition for these services on Azure is the Azure Container Service which provides a lightweight runtime environment for containers that offers scaling and management functionalities using Mesos and docker swarm."}],"level":1,"listItem":"bullet","markDefs":[],"style":"normal"},{"_key":"b63dd96ecd8b","_type":"block","children":[{"_key":"1fcf4d3eed630","_type":"span","marks":[],"text":"Azure container service is easy to set up and deploy lightweight container service but lacks the features of auto-scaling, self-healing, and networking, hence use of Kubernetes and Mesos on Azure provide many advantages which can be summed up as,"}],"markDefs":[],"style":"normal"},{"_key":"a1fdbfa93e3f","_type":"block","children":[{"_key":"3fb038afc28d0","_type":"span","marks":[],"text":"Elastic distributed system meaning it is easy for these services to scale and manage on-demand"}],"level":1,"listItem":"bullet","markDefs":[],"style":"normal"},{"_key":"d800c991251c","_type":"block","children":[{"_key":"11e9493442e80","_type":"span","marks":[],"text":"Provided with simplified Web UI"}],"level":1,"listItem":"bullet","markDefs":[],"style":"normal"},{"_key":"6c7ba546588b","_type":"block","children":[{"_key":"02a67df5984a0","_type":"span","marks":[],"text":"Fault-tolerant architecture which provides availability zones in case of services being affected by natural disasters"}],"level":1,"listItem":"bullet","markDefs":[],"style":"normal"},{"_key":"efab80dfac68","_type":"block","children":[{"_key":"26bea65024bc0","_type":"span","marks":[],"text":"Ease of integration with plugins and services"}],"level":1,"listItem":"bullet","markDefs":[],"style":"normal"},{"_key":"5ec8e428ee6d","_type":"block","children":[{"_key":"af7e74e0d7350","_type":"span","marks":[],"text":"Designed with Continuous Delivery and Continuous Integration tools inbuilt"}],"level":1,"listItem":"bullet","markDefs":[],"style":"normal"},{"_key":"e0fafa191287","_type":"block","children":[{"_key":"4d7ead9a4b1b0","_type":"span","marks":[],"text":"Enterprise-grade security and governance of services"}],"level":1,"listItem":"bullet","markDefs":[],"style":"normal"},{"_key":"aeb01f3ff115","_type":"block","children":[{"_key":"8f1438cf8bbe0","_type":"span","marks":["strong"],"text":"Cons of using Kubernetes and Mesos on Azure,"}],"markDefs":[],"style":"normal"},{"_key":"6048815ab94b","_type":"block","children":[{"_key":"3ccbc74a12240","_type":"span","marks":[],"text":"These services are not suitable for running on a long term basis"}],"level":1,"listItem":"bullet","markDefs":[],"style":"normal"},{"_key":"ed88b0482d1d","_type":"block","children":[{"_key":"7d5d8a6b11710","_type":"span","marks":[],"text":"Using Kubernetes and Mesos on AWS"}],"markDefs":[],"style":"h2"},{"_key":"e7771567dc77","_type":"block","children":[{"_key":"8588794ff7780","_type":"span","marks":[],"text":"Both Kubernetes and Mesos on AWS manages a cluster formed by Amazon EC2 instances running container instances on them."}],"markDefs":[],"style":"normal"},{"_key":"11800213ee87","_type":"block","children":[{"_key":"5dc2b9a09dee0","_type":"span","marks":[],"text":"Amazon Elastic Kubernetes Service (Amazon EKS) provides a flexible, one-click approach to deploy and run Kubernetes clusters on-premise or on the Amazon cloud. This service runs by running containers on EC2 instances in a logical entity called pods managed by control plane software."}],"level":1,"listItem":"bullet","markDefs":[],"style":"normal"},{"_key":"d6d623991415","_type":"block","children":[{"_key":"f3297a40505f0","_type":"span","marks":[],"text":"Apache Mesos in AWS provides a platform for running big data applications on the cloud with shared containers and non-container entities managed under a single cloud data cluster. It runs on Amazon’s EC2 instances abstracting its compute resources to provide an easily built, fault-tolerant, and distributed systems environment for running applications efficiently."}],"level":1,"listItem":"bullet","markDefs":[],"style":"normal"},{"_key":"3c8a29e90898","_type":"block","children":[{"_key":"1fda08eb9fde0","_type":"span","marks":[],"text":"Elastic container service is the Amazon-provided container orchestration solution that is well integrated with Amazon cloud services and proves as a good alternative for Kubernetes. Since ECS provides more flexibility and seamless integrations with Amazon Route 53, Secrets Manager, AWS Identity and Access Management (IAM), and Amazon CloudWatch, it proves to be a better solution compared to EKS."}],"level":1,"listItem":"bullet","markDefs":[],"style":"normal"},{"_key":"bdc88eab5f7d","_type":"block","children":[{"_key":"0c6d68c835be0","_type":"span","marks":[],"text":"Mesos acts as a container engine whereas ECS acts as a container orchestrator in AWS. When it comes to managing thousands of nodes and hybrid big data workloads Mesos is a clear winner, but for running container instances for a limited user base ECS is a better option."}],"level":1,"listItem":"bullet","markDefs":[],"style":"normal"},{"_key":"82f5635019fd","_type":"block","children":[{"_key":"a93b62833be20","_type":"span","marks":[],"text":"In general, ECS provides a better pricing model and more wide variety of service integrations hence is a better alternative for EKS and Mesos on AWS."}],"level":1,"listItem":"bullet","markDefs":[],"style":"normal"},{"_key":"d5a0c239e40e","_type":"block","children":[{"_key":"ea10a0ceaa3c0","_type":"span","marks":[],"text":"When to use which?"}],"markDefs":[],"style":"h2"},{"_key":"6e16f93d2c53","_type":"block","children":[{"_key":"b03172c24c890","_type":"span","marks":[],"text":"Kubernetes runs the containerized workload on a single node or can range to a set of nodes forming a cluster hence, it is best suited for organizations and start-ups migrating from application deployments on small scale to cloud-native deployments. Kubernetes aids in the initial lifecycle of application development since it is lightweight, easy to deploy, and helps developers in their initial stage of working on cluster-oriented deployments. Backed with a large pool of development communities, Kubernetes provides a vast variety of plugins and integrations as compared to its competition."}],"markDefs":[],"style":"normal"},{"_key":"9fb1aa62f61f","_type":"block","children":[{"_key":"ff827a7a23090","_type":"span","marks":[],"text":"If you have an existing workload that needs to be integrated with your currently developing containerized application then Mesos helps you leverage its hybrid distributed systems orchestration design, by providing a framework to host all the workloads in a single cluster. Mesos is desirable when you require a stable platform with a high number of nodes, typically over 20 in a cluster. Mesos has a steep in-depth learning curve for developers in order to harness the full potential of the Mesos cluster."}],"markDefs":[],"style":"normal"},{"_key":"8b11725201e0","_type":"block","children":[{"_key":"75071464a7740","_type":"span","marks":[],"text":"Conclusion"}],"markDefs":[],"style":"h4"},{"_key":"5772c94c66eb","_type":"block","children":[{"_key":"35d2f5bf6fbd0","_type":"span","marks":[],"text":"In conclusion, Kubernetes and Mesos are completely different frameworks that enable orchestration of Docker containers finding the similarity in providing scalability, portability, and isolated workspace for running your workloads.\nKubernetes turns out to be a fan favorite, provides a simple to use architecture with many benefits for beginners in cloud development, whereas Mesos is a robust and heavyweight framework that is best suited for organizations with the need of existing application migration and integration with the containerized environment."}],"markDefs":[],"style":"normal"}],"_rawFaq":null,"publishedAt":"2021-10-08T12:00:27.674Z","_updatedAt":"2021-10-12T11:36:30Z","readingTime":"10 Min read","altTagMainImage":null,"titleMetaData":"Kubernetes vs Mesos: Comparison of Container Orchestration","shortanchorlinkh2":[{"h2link":"What is a container?","h2shorttext":"What is a container?"},{"h2link":"What is a container orchestrator and why do you need it?","h2shorttext":"Container Orchestrator"},{"h2link":"Overview of Kubernetes","h2shorttext":"Overview of Kubernetes"},{"h2link":"Overview of Mesos","h2shorttext":"Overview of Mesos"},{"h2link":"Kubernetes vs. Mesos","h2shorttext":"Kubernetes vs. Mesos"},{"h2link":"Using Kubernetes and Mesos on Azure","h2shorttext":"Using Kubernetes and Mesos on Azure"},{"h2link":"Using Kubernetes and Mesos on AWS","h2shorttext":"Using Kubernetes and Mesos on AWS"},{"h2link":"When to use which?","h2shorttext":"When to use which?"}],"categories":[{"id":"61b2fbb3-23c5-54d6-aac3-bf8ba2dcecc3","title":"Blog"}],"mainImage":{"asset":{"id":"image-e59e0b7a0d71932531d1de151cc59bf2cce6f509-2240x1260-png","url":"https://cdn.sanity.io/images/ay6gmb6r/production/e59e0b7a0d71932531d1de151cc59bf2cce6f509-2240x1260.png","fluid":{"sizes":"(max-width: 800px) 100vw, 800px","src":"https://cdn.sanity.io/images/ay6gmb6r/production/e59e0b7a0d71932531d1de151cc59bf2cce6f509-2240x1260.png?w=800&h=450&fit=crop","srcSet":"https://cdn.sanity.io/images/ay6gmb6r/production/e59e0b7a0d71932531d1de151cc59bf2cce6f509-2240x1260.png?w=200&h=113&fit=crop 200w,\nhttps://cdn.sanity.io/images/ay6gmb6r/production/e59e0b7a0d71932531d1de151cc59bf2cce6f509-2240x1260.png?w=400&h=225&fit=crop 400w,\nhttps://cdn.sanity.io/images/ay6gmb6r/production/e59e0b7a0d71932531d1de151cc59bf2cce6f509-2240x1260.png?w=800&h=450&fit=crop 800w,\nhttps://cdn.sanity.io/images/ay6gmb6r/production/e59e0b7a0d71932531d1de151cc59bf2cce6f509-2240x1260.png?w=1200&h=675&fit=crop 1200w,\nhttps://cdn.sanity.io/images/ay6gmb6r/production/e59e0b7a0d71932531d1de151cc59bf2cce6f509-2240x1260.png?w=1600&h=900&fit=crop 1600w,\nhttps://cdn.sanity.io/images/ay6gmb6r/production/e59e0b7a0d71932531d1de151cc59bf2cce6f509-2240x1260.png 2240w"}}},"author":{"id":"41839b4c-7970-59fe-ab1b-78a8fbe1e9d8","name":"Kintul Upadhyay","myColor":{"hex":"#2454e3"},"image":{"asset":{"_id":"image-e7e31759e107dcd9f9d409f876d67bd0d4116d79-4762x6735-png","assetId":"e7e31759e107dcd9f9d409f876d67bd0d4116d79","_type":"sanity.imageAsset","id":"image-e7e31759e107dcd9f9d409f876d67bd0d4116d79-4762x6735-png"},"_type":"image","_key":null},"slug":{"current":"kintul-upadhyay"}},"slug":{"current":"kubernetes-vs-mesos"},"tags":[{"id":"5dce10b5-ec2c-5470-bf9d-81eba50400f4","slug":{"current":"kubernetes"},"title":"Kubernetes"},{"id":"88622e34-fe67-5f26-83fb-69aa4862c663","slug":{"current":"devops"},"title":"DevOps"}],"referenceBlogPost":[{"mainImage":{"asset":{"id":"image-88d3f1c1775a96701927c068539e5fdf03f5a100-4480x2520-png","fluid":{"src":"https://cdn.sanity.io/images/ay6gmb6r/production/88d3f1c1775a96701927c068539e5fdf03f5a100-4480x2520.png?w=800&h=450&fit=crop","srcSet":"https://cdn.sanity.io/images/ay6gmb6r/production/88d3f1c1775a96701927c068539e5fdf03f5a100-4480x2520.png?w=200&h=113&fit=crop 200w,\nhttps://cdn.sanity.io/images/ay6gmb6r/production/88d3f1c1775a96701927c068539e5fdf03f5a100-4480x2520.png?w=400&h=225&fit=crop 400w,\nhttps://cdn.sanity.io/images/ay6gmb6r/production/88d3f1c1775a96701927c068539e5fdf03f5a100-4480x2520.png?w=800&h=450&fit=crop 800w,\nhttps://cdn.sanity.io/images/ay6gmb6r/production/88d3f1c1775a96701927c068539e5fdf03f5a100-4480x2520.png?w=1200&h=675&fit=crop 1200w,\nhttps://cdn.sanity.io/images/ay6gmb6r/production/88d3f1c1775a96701927c068539e5fdf03f5a100-4480x2520.png?w=1600&h=900&fit=crop 1600w,\nhttps://cdn.sanity.io/images/ay6gmb6r/production/88d3f1c1775a96701927c068539e5fdf03f5a100-4480x2520.png?w=2400&h=1350&fit=crop 2400w,\nhttps://cdn.sanity.io/images/ay6gmb6r/production/88d3f1c1775a96701927c068539e5fdf03f5a100-4480x2520.png 4480w","sizes":"(max-width: 800px) 100vw, 800px"}}},"publishedAt":"2021-08-10T12:00:41.149Z","readingTime":"16 Min read","author":{"name":"Kintul Upadhyay"},"slug":{"current":"kubernetes-12-factor-apps"},"title":"Combining the power of 12 Factor App with Kubernetes to build next-generation SaaS products"},{"mainImage":{"asset":{"id":"image-2127f60fcde1782a481427631473ff84ea0ffcd0-4480x2520-png","fluid":{"src":"https://cdn.sanity.io/images/ay6gmb6r/production/2127f60fcde1782a481427631473ff84ea0ffcd0-4480x2520.png?w=800&h=450&fit=crop","srcSet":"https://cdn.sanity.io/images/ay6gmb6r/production/2127f60fcde1782a481427631473ff84ea0ffcd0-4480x2520.png?w=200&h=113&fit=crop 200w,\nhttps://cdn.sanity.io/images/ay6gmb6r/production/2127f60fcde1782a481427631473ff84ea0ffcd0-4480x2520.png?w=400&h=225&fit=crop 400w,\nhttps://cdn.sanity.io/images/ay6gmb6r/production/2127f60fcde1782a481427631473ff84ea0ffcd0-4480x2520.png?w=800&h=450&fit=crop 800w,\nhttps://cdn.sanity.io/images/ay6gmb6r/production/2127f60fcde1782a481427631473ff84ea0ffcd0-4480x2520.png?w=1200&h=675&fit=crop 1200w,\nhttps://cdn.sanity.io/images/ay6gmb6r/production/2127f60fcde1782a481427631473ff84ea0ffcd0-4480x2520.png?w=1600&h=900&fit=crop 1600w,\nhttps://cdn.sanity.io/images/ay6gmb6r/production/2127f60fcde1782a481427631473ff84ea0ffcd0-4480x2520.png?w=2400&h=1350&fit=crop 2400w,\nhttps://cdn.sanity.io/images/ay6gmb6r/production/2127f60fcde1782a481427631473ff84ea0ffcd0-4480x2520.png 4480w","sizes":"(max-width: 800px) 100vw, 800px"}}},"publishedAt":"2021-06-18T12:00:38.760Z","readingTime":"8 Min read","author":{"name":"Kintul Upadhyay"},"slug":{"current":"what-is-gitops-devops"},"title":" A look into GitOps : Future of DevOps?"}]},"readNextBlog":[{"mainImage":{"asset":{"id":"image-88d3f1c1775a96701927c068539e5fdf03f5a100-4480x2520-png","fluid":{"src":"https://cdn.sanity.io/images/ay6gmb6r/production/88d3f1c1775a96701927c068539e5fdf03f5a100-4480x2520.png?w=800&h=450&fit=crop","srcSet":"https://cdn.sanity.io/images/ay6gmb6r/production/88d3f1c1775a96701927c068539e5fdf03f5a100-4480x2520.png?w=200&h=113&fit=crop 200w,\nhttps://cdn.sanity.io/images/ay6gmb6r/production/88d3f1c1775a96701927c068539e5fdf03f5a100-4480x2520.png?w=400&h=225&fit=crop 400w,\nhttps://cdn.sanity.io/images/ay6gmb6r/production/88d3f1c1775a96701927c068539e5fdf03f5a100-4480x2520.png?w=800&h=450&fit=crop 800w,\nhttps://cdn.sanity.io/images/ay6gmb6r/production/88d3f1c1775a96701927c068539e5fdf03f5a100-4480x2520.png?w=1200&h=675&fit=crop 1200w,\nhttps://cdn.sanity.io/images/ay6gmb6r/production/88d3f1c1775a96701927c068539e5fdf03f5a100-4480x2520.png?w=1600&h=900&fit=crop 1600w,\nhttps://cdn.sanity.io/images/ay6gmb6r/production/88d3f1c1775a96701927c068539e5fdf03f5a100-4480x2520.png?w=2400&h=1350&fit=crop 2400w,\nhttps://cdn.sanity.io/images/ay6gmb6r/production/88d3f1c1775a96701927c068539e5fdf03f5a100-4480x2520.png 4480w","sizes":"(max-width: 800px) 100vw, 800px"}}},"publishedAt":"2021-08-10T12:00:41.149Z","readingTime":"16 Min read","author":{"name":"Kintul Upadhyay"},"slug":{"current":"kubernetes-12-factor-apps"},"title":"Combining the power of 12 Factor App with Kubernetes to build next-generation SaaS products"},{"mainImage":{"asset":{"id":"image-2127f60fcde1782a481427631473ff84ea0ffcd0-4480x2520-png","fluid":{"src":"https://cdn.sanity.io/images/ay6gmb6r/production/2127f60fcde1782a481427631473ff84ea0ffcd0-4480x2520.png?w=800&h=450&fit=crop","srcSet":"https://cdn.sanity.io/images/ay6gmb6r/production/2127f60fcde1782a481427631473ff84ea0ffcd0-4480x2520.png?w=200&h=113&fit=crop 200w,\nhttps://cdn.sanity.io/images/ay6gmb6r/production/2127f60fcde1782a481427631473ff84ea0ffcd0-4480x2520.png?w=400&h=225&fit=crop 400w,\nhttps://cdn.sanity.io/images/ay6gmb6r/production/2127f60fcde1782a481427631473ff84ea0ffcd0-4480x2520.png?w=800&h=450&fit=crop 800w,\nhttps://cdn.sanity.io/images/ay6gmb6r/production/2127f60fcde1782a481427631473ff84ea0ffcd0-4480x2520.png?w=1200&h=675&fit=crop 1200w,\nhttps://cdn.sanity.io/images/ay6gmb6r/production/2127f60fcde1782a481427631473ff84ea0ffcd0-4480x2520.png?w=1600&h=900&fit=crop 1600w,\nhttps://cdn.sanity.io/images/ay6gmb6r/production/2127f60fcde1782a481427631473ff84ea0ffcd0-4480x2520.png?w=2400&h=1350&fit=crop 2400w,\nhttps://cdn.sanity.io/images/ay6gmb6r/production/2127f60fcde1782a481427631473ff84ea0ffcd0-4480x2520.png 4480w","sizes":"(max-width: 800px) 100vw, 800px"}}},"publishedAt":"2021-06-18T12:00:38.760Z","readingTime":"8 Min read","author":{"name":"Kintul Upadhyay"},"slug":{"current":"what-is-gitops-devops"},"title":" A look into GitOps : Future of DevOps?"}],"blogSLug":"kubernetes-vs-mesos"}},"staticQueryHashes":["1951403926","2015784780","2763451262","3649515864","3810076356","4118766420"]}