{"componentChunkName":"component---src-components-blogs-blog-detail-js","path":"/blog/ruby-on-rails-rendering-json-response-for-rails-api","result":{"pageContext":{"post":{"id":"b877a1cd-ab72-5903-8941-1367ea107779","title":"Ruby on Rails Rendering JSON Response for Rails API","excerpt":"Ruby on Rails returns rendering JSON Response for Rails API to exchange data between servers & clients among developers. Learn Rails JSON.","_rawBody":[{"_key":"fc65e794843c","_type":"block","children":[{"_key":"fc65e794843c0","_type":"span","marks":[],"text":"JSON is a favorite format for exchanging data between servers and clients among developers. Rails provide support for rendering proper JSON response, making it easy to focus on the core functionality of the application. Here are a few things I learned to create a clean, customized Rails JSON render response."}],"markDefs":[],"style":"normal"},{"Separatorr":true,"_key":"60168924740b","_type":"separator"},{"_key":"86f8206012c8","_type":"block","children":[{"_key":"86f8206012c80","_type":"span","marks":[],"text":"Suppose we have a User model with fields such as first_name, last_name, picture, age, authentication_token, password_digest and timestamps fields such as created_at and updated_at. Using Rails render json: @user will convert the user object to json by calling “to_json” method of the user for you."}],"markDefs":[],"style":"normal"},{"Separatorr":true,"_key":"d2737551c159","_type":"separator"},{"_key":"3678bdb5592a","_type":"code","code":"render json: @user"},{"_key":"8adf7fc60a98","_type":"block","children":[{"_key":"8adf7fc60a980","_type":"span","marks":[],"text":"The generated response contains all fields of our User model, including authentication tokens, password digest, timestamps or other sensitive information related to a user that should not be permitted in response."}],"markDefs":[],"style":"normal"},{"_key":"843042cf8125","_type":"block","children":[{"_key":"843042cf81250","_type":"span","marks":[],"text":"To prevent such information from being sent I used to prepare customized JSON responses in Rails by logic related to rendering inside of helper classes and controller actions. That Rails controller JSON return response approach just increased redundancy, inconsistency, inefficiency and was harder to maintain. Luckily, soon I got introduced to the concept of overriding “as_json” method."}],"markDefs":[],"style":"normal"},{"Separatorr":true,"_key":"c8b4ae10c5f1","_type":"separator"},{"_key":"055ad255bcd2","_type":"code","code":"# override as_json method of User class\r\ndef as_json(options={})\r\n  super(only: [:picture, :age],\r\n          methods: [:name])\r\nend\r\n# put helper methods, such as creating full name from given first_name and last_name attribute of user \r\ndef name \r\n  self.first_name +\" \" +self.last_name\r\nend\r\n# example response, note that timestamps, authentication token and password digest fields are not present\r\n# user: {\r\n#   name: \"some name\",\r\n#   picture: \"url\",\r\n#   age: 20\r\n# }\r\n# most important: calling render json: @user returns this response","language":"html"},{"_key":"1e6c870fa8fd","_type":"block","children":[{"_key":"1e6c870fa8fd0","_type":"span","marks":[],"text":"This approach seems clean and nice. We are now showing only name, picture and age fields. But this is not enough."}],"markDefs":[],"style":"normal"},{"_key":"aa7547661d6f","_type":"block","children":[{"_key":"aa7547661d6f0","_type":"span","marks":[],"text":"Suppose, our user can have many emails. Now with user response, we need to send data about emails that a user owns. We don’t want to send timestamps fields of any models. Also, we want to send emails information in only certain requests where they are required. Such customization can be done by using the options hash and passing which fields we want in our response."}],"markDefs":[],"style":"normal"},{"_key":"fc3e89488e51","_type":"code","code":"def as_json(options={})\r\n#   options hash accepts four keys for better customization :only, :methods, :include, :except\r\n#   so whenever such keys are found, we call super with those keys to provide response consisting only those keys  \r\n  if options.key?(:only) or options.key?(:methods) or options.key?(:include) or options.key?(:except)\r\n    h = super(options)\r\n  else\r\n    h = super(only: [:picture, :age], \r\n              methods: [:name], \r\n              include: {:emails => { :only => [:id, :email] })\r\n  end  \r\nend\r\n# response when no options passed:\r\n# ex. render json: @user\r\n# user: {\r\n#   picture: \"url\",\r\n#   age: \"20\",\r\n#   name: \"some name\",\r\n#   emails: [\r\n#     {\r\n#       id: 1, \r\n#       email: \"somename@gmail.com\"\r\n#     },\r\n#     {\r\n#       id: 2, \r\n#       email: \"somename@yahoo.com\"\r\n#     }\r\n#   ]\r\n# }\r\n# response when options passed\r\n# ex:   render json: @user.as_json(only: [:picture, :age], methods: [:name])\r\n# user: {\r\n#   picture: \"url\",\r\n#   age: \"20\",\r\n#   name: \"some name\"","language":"html"},{"_key":"f37e378f43e1","_type":"block","children":[{"_key":"f37e378f43e10","_type":"span","marks":[],"text":"In the above example, by default when we call"}],"markDefs":[],"style":"normal"},{"_key":"e32f163fdd56","_type":"code","code":"render json: @user"},{"_key":"e6a9e71c3abd","_type":"block","children":[{"_key":"e6a9e71c3abd0","_type":"span","marks":[],"text":"It returns user hash with related email information. Note that only the required information is passed in response to JSON. When we need to exclude emails information from the response, we just need to pass fields we need in options hash as shown in the example as:"}],"markDefs":[],"style":"normal"},{"_key":"b5574f12776a","_type":"code","code":"render json: @user.as_json(only: [:picture, :age], methods: [:name])"},{"_key":"9c7bed824ae7","_type":"block","children":[{"_key":"9c7bed824ae70","_type":"span","marks":[],"text":"This is the approach I use generally to simplify Rails JSON render response and is very effective."}],"markDefs":[],"style":"normal"},{"Separatorr":true,"_key":"42474e6e0a71","_type":"separator"},{"_key":"8189cfdb11b1","_type":"block","children":[{"_key":"8189cfdb11b10","_type":"span","marks":[],"text":"There is one better approach of using active model serializers which delegates as_json and to_json to adapters. I am learning how to use that in my projects as I came to know about it recently. So far active model serializers seem cleaner and more flexible approach than overriding as_json method and will post about that soon."}],"markDefs":[],"style":"normal"},{"Separatorr":true,"_key":"5a812b8990d8","_type":"separator"},{"_key":"760b9c64280d","_type":"block","children":[{"_key":"760b9c64280d0","_type":"span","marks":[],"text":"Thanks for reading, you can let me know about how you render JSON response in Ruby on Rails and what you can do to improve the process."}],"markDefs":[],"style":"normal"},{"_key":"dd075f16cb17","_type":"customBlockQuote","customblockArray":[{"_key":"5ca628d81852","_type":"block","children":[{"_key":"5ca628d818520","_type":"span","marks":[],"text":"Originally posted on "},{"_key":"5ca628d818521","_type":"span","marks":["0ccf53ed9511"],"text":"parthtalks"},{"_key":"5ca628d818522","_type":"span","marks":[],"text":" by "},{"_key":"5ca628d818523","_type":"span","marks":["53efc36a16f3"],"text":"Parth Modi"},{"_key":"5ca628d818524","_type":"span","marks":[],"text":"."}],"markDefs":[{"_key":"0ccf53ed9511","_type":"link","href":"http://parthtalks.weebly.com/blog/preparing-clean-and-customized-json-response-for-rails-api"},{"_key":"53efc36a16f3","_type":"link","href":"http://8parth.github.io/"}],"style":"normal"}]}],"_rawFaq":null,"publishedAt":"2016-10-25T12:00:00.000Z","_updatedAt":"2020-08-31T08:26:42Z","readingTime":"2 min read","altTagMainImage":null,"titleMetaData":null,"shortanchorlinkh2":[],"categories":[{"id":"61b2fbb3-23c5-54d6-aac3-bf8ba2dcecc3","title":"Blog"}],"mainImage":{"asset":{"id":"image-9a097da5e15447a4bdf46de1da9e4443a196dd23-6720x3780-png","url":"https://cdn.sanity.io/images/ay6gmb6r/production/9a097da5e15447a4bdf46de1da9e4443a196dd23-6720x3780.png","fluid":{"sizes":"(max-width: 800px) 100vw, 800px","src":"https://cdn.sanity.io/images/ay6gmb6r/production/9a097da5e15447a4bdf46de1da9e4443a196dd23-6720x3780.png?w=800&h=450&fit=crop","srcSet":"https://cdn.sanity.io/images/ay6gmb6r/production/9a097da5e15447a4bdf46de1da9e4443a196dd23-6720x3780.png?w=200&h=113&fit=crop 200w,\nhttps://cdn.sanity.io/images/ay6gmb6r/production/9a097da5e15447a4bdf46de1da9e4443a196dd23-6720x3780.png?w=400&h=225&fit=crop 400w,\nhttps://cdn.sanity.io/images/ay6gmb6r/production/9a097da5e15447a4bdf46de1da9e4443a196dd23-6720x3780.png?w=800&h=450&fit=crop 800w,\nhttps://cdn.sanity.io/images/ay6gmb6r/production/9a097da5e15447a4bdf46de1da9e4443a196dd23-6720x3780.png?w=1200&h=675&fit=crop 1200w,\nhttps://cdn.sanity.io/images/ay6gmb6r/production/9a097da5e15447a4bdf46de1da9e4443a196dd23-6720x3780.png?w=1600&h=900&fit=crop 1600w,\nhttps://cdn.sanity.io/images/ay6gmb6r/production/9a097da5e15447a4bdf46de1da9e4443a196dd23-6720x3780.png?w=2400&h=1350&fit=crop 2400w,\nhttps://cdn.sanity.io/images/ay6gmb6r/production/9a097da5e15447a4bdf46de1da9e4443a196dd23-6720x3780.png 6720w"}}},"author":{"id":"bf8cf623-8472-539f-8c57-52ca5e7d894e","name":"Parth Modi","myColor":{"hex":"#1641ff"},"image":{"asset":{"_id":"image-05eb13b525c132be875c6f2f2f0850f7dc121d6d-288x288-png","assetId":"05eb13b525c132be875c6f2f2f0850f7dc121d6d","_type":"sanity.imageAsset","id":"image-05eb13b525c132be875c6f2f2f0850f7dc121d6d-288x288-png"},"_type":"image","_key":null},"slug":{"current":"parth-modi"}},"slug":{"current":"ruby-on-rails-rendering-json-response-for-rails-api"},"tags":[{"id":"e9f960b2-17ab-5442-9198-5dfc96f203ec","slug":{"current":"ruby-on-rails"},"title":"RoR"},{"id":"9b4c8e06-fe1d-54a8-b141-e28cfa915336","slug":{"current":"web-development"},"title":"Web Development"}],"referenceBlogPost":[{"mainImage":{"asset":{"id":"image-d95a314a76d38b07ffb9c4b2e70b9398b94f1ac1-1000x750-jpg","fluid":{"src":"https://cdn.sanity.io/images/ay6gmb6r/production/d95a314a76d38b07ffb9c4b2e70b9398b94f1ac1-1000x750.jpg?w=800&h=600&fit=crop","srcSet":"https://cdn.sanity.io/images/ay6gmb6r/production/d95a314a76d38b07ffb9c4b2e70b9398b94f1ac1-1000x750.jpg?w=200&h=150&fit=crop 200w,\nhttps://cdn.sanity.io/images/ay6gmb6r/production/d95a314a76d38b07ffb9c4b2e70b9398b94f1ac1-1000x750.jpg?w=400&h=300&fit=crop 400w,\nhttps://cdn.sanity.io/images/ay6gmb6r/production/d95a314a76d38b07ffb9c4b2e70b9398b94f1ac1-1000x750.jpg?w=800&h=600&fit=crop 800w,\nhttps://cdn.sanity.io/images/ay6gmb6r/production/d95a314a76d38b07ffb9c4b2e70b9398b94f1ac1-1000x750.jpg 1000w","sizes":"(max-width: 800px) 100vw, 800px"}}},"publishedAt":"2019-06-14T12:00:00.000Z","readingTime":"10 min read","author":{"name":"Karan Shah"},"slug":{"current":"ruby-on-rail-framework-when-to-choose-and-when-not"},"title":"Ruby on Rail Framework — When to choose and when not?"},{"mainImage":{"asset":{"id":"image-2477969b141916eca26ad7889d419a1114aa82da-2240x1260-png","fluid":{"src":"https://cdn.sanity.io/images/ay6gmb6r/production/2477969b141916eca26ad7889d419a1114aa82da-2240x1260.png?w=800&h=450&fit=crop","srcSet":"https://cdn.sanity.io/images/ay6gmb6r/production/2477969b141916eca26ad7889d419a1114aa82da-2240x1260.png?w=200&h=113&fit=crop 200w,\nhttps://cdn.sanity.io/images/ay6gmb6r/production/2477969b141916eca26ad7889d419a1114aa82da-2240x1260.png?w=400&h=225&fit=crop 400w,\nhttps://cdn.sanity.io/images/ay6gmb6r/production/2477969b141916eca26ad7889d419a1114aa82da-2240x1260.png?w=800&h=450&fit=crop 800w,\nhttps://cdn.sanity.io/images/ay6gmb6r/production/2477969b141916eca26ad7889d419a1114aa82da-2240x1260.png?w=1200&h=675&fit=crop 1200w,\nhttps://cdn.sanity.io/images/ay6gmb6r/production/2477969b141916eca26ad7889d419a1114aa82da-2240x1260.png?w=1600&h=900&fit=crop 1600w,\nhttps://cdn.sanity.io/images/ay6gmb6r/production/2477969b141916eca26ad7889d419a1114aa82da-2240x1260.png 2240w","sizes":"(max-width: 800px) 100vw, 800px"}}},"publishedAt":"2020-02-05T12:00:00.000Z","readingTime":"4 min read","author":{"name":"Manthan Andharia"},"slug":{"current":"how-to-generate-password-protected-pdfs-in-ruby-on-rails-with-wickedpdf"},"title":"Generate Password Protected PDFs in Ruby on Rails"}]},"readNextBlog":[{"mainImage":{"asset":{"id":"image-d95a314a76d38b07ffb9c4b2e70b9398b94f1ac1-1000x750-jpg","fluid":{"src":"https://cdn.sanity.io/images/ay6gmb6r/production/d95a314a76d38b07ffb9c4b2e70b9398b94f1ac1-1000x750.jpg?w=800&h=600&fit=crop","srcSet":"https://cdn.sanity.io/images/ay6gmb6r/production/d95a314a76d38b07ffb9c4b2e70b9398b94f1ac1-1000x750.jpg?w=200&h=150&fit=crop 200w,\nhttps://cdn.sanity.io/images/ay6gmb6r/production/d95a314a76d38b07ffb9c4b2e70b9398b94f1ac1-1000x750.jpg?w=400&h=300&fit=crop 400w,\nhttps://cdn.sanity.io/images/ay6gmb6r/production/d95a314a76d38b07ffb9c4b2e70b9398b94f1ac1-1000x750.jpg?w=800&h=600&fit=crop 800w,\nhttps://cdn.sanity.io/images/ay6gmb6r/production/d95a314a76d38b07ffb9c4b2e70b9398b94f1ac1-1000x750.jpg 1000w","sizes":"(max-width: 800px) 100vw, 800px"}}},"publishedAt":"2019-06-14T12:00:00.000Z","readingTime":"10 min read","author":{"name":"Karan Shah"},"slug":{"current":"ruby-on-rail-framework-when-to-choose-and-when-not"},"title":"Ruby on Rail Framework — When to choose and when not?"},{"mainImage":{"asset":{"id":"image-2477969b141916eca26ad7889d419a1114aa82da-2240x1260-png","fluid":{"src":"https://cdn.sanity.io/images/ay6gmb6r/production/2477969b141916eca26ad7889d419a1114aa82da-2240x1260.png?w=800&h=450&fit=crop","srcSet":"https://cdn.sanity.io/images/ay6gmb6r/production/2477969b141916eca26ad7889d419a1114aa82da-2240x1260.png?w=200&h=113&fit=crop 200w,\nhttps://cdn.sanity.io/images/ay6gmb6r/production/2477969b141916eca26ad7889d419a1114aa82da-2240x1260.png?w=400&h=225&fit=crop 400w,\nhttps://cdn.sanity.io/images/ay6gmb6r/production/2477969b141916eca26ad7889d419a1114aa82da-2240x1260.png?w=800&h=450&fit=crop 800w,\nhttps://cdn.sanity.io/images/ay6gmb6r/production/2477969b141916eca26ad7889d419a1114aa82da-2240x1260.png?w=1200&h=675&fit=crop 1200w,\nhttps://cdn.sanity.io/images/ay6gmb6r/production/2477969b141916eca26ad7889d419a1114aa82da-2240x1260.png?w=1600&h=900&fit=crop 1600w,\nhttps://cdn.sanity.io/images/ay6gmb6r/production/2477969b141916eca26ad7889d419a1114aa82da-2240x1260.png 2240w","sizes":"(max-width: 800px) 100vw, 800px"}}},"publishedAt":"2020-02-05T12:00:00.000Z","readingTime":"4 min read","author":{"name":"Manthan Andharia"},"slug":{"current":"how-to-generate-password-protected-pdfs-in-ruby-on-rails-with-wickedpdf"},"title":"Generate Password Protected PDFs in Ruby on Rails"}],"blogSLug":"ruby-on-rails-rendering-json-response-for-rails-api"}},"staticQueryHashes":["1951403926","2015784780","2763451262","3649515864","3810076356","4118766420"]}