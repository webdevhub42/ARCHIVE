{"componentChunkName":"component---src-components-blogs-blog-detail-js","path":"/blog/encoding-and-decoding-property-list-aka-plist","result":{"pageContext":{"post":{"id":"fc682e80-e2a9-5c42-9340-df87ac0c16f5","title":"Encoding and Decoding with Property list ‚Äî Swift Codable Plist","excerpt":"Learn why and how to use Propertylistencoder and Propertylistdecoder with Swift Codable Plist to encode & decode Plist files online.","_rawBody":[{"_key":"7c45d6e70f37","_type":"block","children":[{"_key":"7c45d6e70f370","_type":"span","marks":[],"text":"Why do you need a Property List (Plist) Decoder & Encoder?"}],"markDefs":[],"style":"h2"},{"_key":"ca7cfb101eab","_type":"block","children":[{"_key":"ca7cfb101eab0","_type":"span","marks":[],"text":"Sometimes in our application, we need to store the value of some of the API Keys of third party Integrations (if added) like Facebook, Twitter, etc. (or some static data source for your table/collection view)."}],"markDefs":[],"style":"normal"},{"_key":"d9f74e2e2939","_type":"block","children":[{"_key":"d9f74e2e29390","_type":"span","marks":[],"text":"One of the ways to put these keys and values is adding it in a Property List file, aka Plist file. In this post, I‚Äôll show you how I did the same using Swift Plist Encoder and Decoder ‚Äî PropertyListEncoder & PropertyListDecoder, in one of my projects! üòÄ"}],"markDefs":[],"style":"normal"},{"Separatorr":true,"_key":"ac95987eb8bd","_type":"separator"},{"_key":"cc691c792d12","_type":"block","children":[{"_key":"cc691c792d120","_type":"span","marks":[],"text":"1. Just for convenience, I have added an extension to FileManager that has a variable that returns a URL that points to the document folder of your playground."}],"markDefs":[],"style":"normal"},{"_key":"78b577422291","_type":"code","code":"import Foundation\r\n\r\npublic extension FileManager {\r\n// Returns a URL that points to the document folder of this playground.\r\n    static var documentDirectoryURL: URL {\r\n        return try! FileManager.default.url(\r\n            for: .documentDirectory,\r\n            in: .userDomainMask,\r\n            appropriateFor: nil,\r\n            create: false\r\n        )\r\n    }\r\n}"},{"_key":"947139b04efc","_type":"block","children":[{"_key":"947139b04efc0","_type":"span","marks":[],"text":"2. Create a Struct MyKey which conforms to Swift 4 Codable Protocol."}],"markDefs":[],"style":"normal"},{"_key":"ddbd497d73f9","_type":"code","code":"struct MyKey: Codable {\r\n    enum Social: String, Codable {\r\n        case twitter, facebook\r\n    }\r\n    init(keyName: String, keyValue: String, type: Social) {\r\n        self.apiKeyName =  keyName\r\n        self.apiKeyValue = keyValue\r\n        self.keyType = type\r\n    }\r\n    let apiKeyName: String\r\n    let apiKeyValue: String\r\n    let keyType: Social\r\n}"},{"_key":"85a283876b85","_type":"block","children":[{"_key":"85a283876b850","_type":"span","marks":[],"text":"3. Create an array of all your API keys that you want to store."}],"markDefs":[],"style":"normal"},{"_key":"f140db809564","_type":"code","code":"let myKeys = [\r\n  MyKey(\r\n    keyName: \"facebookAPIKey\", \r\n    keyValue: \"ValueOfMyFacebookAPIKey\",\r\n    type: .facebook),\r\n  MyKey(\r\n    keyName: \"twitterAPIKey\", \r\n    keyValue: \"ValueOfMyTwitterAPIKey\", \r\n    type: .twitter)]"},{"_key":"d68a370f5c20","_type":"block","children":[{"_key":"d68a370f5c200","_type":"span","marks":[],"text":"4. Create a separate folder that will contain your Swift Codable plist file containing your key/values. (Only if you wish to)"}],"markDefs":[],"style":"normal"},{"_key":"6f0dabdccfcd","_type":"code","code":"let documentSubdirectoryURL = URL(\r\n    fileURLWithPath: \"MyPlistFolder\",\r\n    relativeTo: FileManager.documentDirectoryURL\r\n)\r\ntry? FileManager.default.createDirectory(\r\n    at: documentSubdirectoryURL,\r\n    withIntermediateDirectories: false\r\n)"},{"_key":"4a1de9a1d996","_type":"block","children":[{"_key":"4a1de9a1d9960","_type":"span","marks":[],"text":"5. As we dive into the Encoding/Decoding Property List online using PropertyListEncoder and PropertyListDecoder, we might encounter several try-catch, so start with a do block."}],"markDefs":[],"style":"normal"},{"_key":"4bd9f75cdb8e","_type":"code","code":"do {\r\n  /// Specify a URL where you want to save the myAPIKeys.plist file with proper extension and pathComponent.\r\n    \r\n  let plistURL = URL(fileURLWithPath: \"myAPIKeys\", relativeTo: FileManager.documentDirectoryURL.appendingPathComponent(\"MyPlistFolder\")).appendingPathExtension(\"plist\")\r\n\r\n  /// Create an instance of PropertyListEncoder()\r\n  /// Specifying outputFormat as `xml` so that you can view it in a source code file format or plist file format.\r\n  /// After that, encode your array of keys that you created above\r\n  /// And finally, write the encoded Data to your myAPIKeys.plist file.\r\n  /// Voila!\r\n  let plistEncoder = PropertyListEncoder()\r\n  plistEncoder.outputFormat = .xml\r\n  let plistData = try plistEncoder.encode(myKeys)\r\n  try plistData.write(to: plistURL)\r\n\r\n  /// Create an instance of PropertyListDecoder()\r\n  /// Fetch data from the plistURL\r\n  /// After that, decode your data by specifying the type of your data. Please note that we had created an array of keys and hence the type will be array of MyKey, i.e [MyKey].self\r\n  /// Bingo!\r\n  \r\n  let plistDecoder = PropertyListDecoder()\r\n  let data = try Data.init(contentsOf: plistURL)\r\n  let value = try plistDecoder.decode([MyKey].self, from: data)\r\n} catch {print(error)}"},{"_key":"e0b89295f524","_type":"block","children":[{"_key":"e0b89295f5240","_type":"span","marks":[],"text":"From the "},{"_key":"e0b89295f5241","_type":"span","marks":["em"],"text":"value"},{"_key":"e0b89295f5242","_type":"span","marks":[],"text":", you can retrieve your specific key‚Äôs name/value by filtering on the "},{"_key":"e0b89295f5243","_type":"span","marks":["em"],"text":"keyType"},{"_key":"e0b89295f5244","_type":"span","marks":[],"text":" üòÄ"}],"markDefs":[],"style":"normal"},{"_key":"be2304a1a5c6","_type":"block","children":[{"_key":"be2304a1a5c60","_type":"span","marks":[],"text":"P.S. This guide only describes the ‚Äúhow to‚Äù encode and decode plist files using ‚Äòpropertylistencoder‚Äô and ‚Äòpropertylistdecoder‚Äô. There are many alternatives that can be used for fetching the API Key Values, saving and fetching static data for table/collection view, etc."}],"markDefs":[],"style":"blockquote"},{"Separatorr":true,"_key":"0d64049951b1","_type":"separator"},{"_key":"3d5d45fa3a3c","_type":"block","children":[{"_key":"3d5d45fa3a3c0","_type":"span","marks":[],"text":"‚≠êÔ∏è If you want to check out the playground page, here you go:"}],"markDefs":[],"style":"normal"},{"_key":"aeb152d10f95","_type":"block","children":[{"_key":"aeb152d10f950","_type":"span","marks":[],"text":"Go for the ‚Äú"},{"_key":"aeb152d10f951","_type":"span","marks":["6f875cf6fa93"],"text":"MyPlistPlayground.playground"},{"_key":"aeb152d10f952","_type":"span","marks":[],"text":"‚Äù"}],"markDefs":[{"_key":"6f875cf6fa93","_type":"link","href":"https://github.com/mansi-cherry/iOSHowTo-s/tree/master/MyPlistPlayground.playground"}],"style":"normal"},{"_key":"abc89acd9227","_type":"urllink","shortDescription":"HowTo-s - This repository contains different \"how to do\" stuff in iOS with Swift","title":"mansi-cherry/iOSHowTo-s iOS","urlLink":"https://github.com/mansi-cherry/iOSHowTo-s","urlLinkImage":{"_type":"customImage","asset":{"_ref":"image-6e6640fb2b39557b8f40a9d0d06daa4b5c7d79b0-290x200-png","_type":"reference"}}},{"Separatorr":true,"_key":"b5b61b657cf7","_type":"separator"},{"_key":"46d39666acf6","_type":"block","children":[{"_key":"46d39666acf60","_type":"span","marks":[],"text":"Refer my other articles here:"}],"markDefs":[],"style":"normal"},{"_key":"1f130f1719c5","_type":"block","children":[{"_key":"1f130f1719c50","_type":"span","marks":[],"text":"üëâüèº "},{"_key":"1f130f1719c51","_type":"span","marks":["0b07ebfd3069"],"text":"Animated Transitions"},{"_key":"1f130f1719c52","_type":"span","marks":[],"text":""}],"markDefs":[{"_key":"0b07ebfd3069","_type":"link","href":"https://medium.com/if-let-swift-programming/animations-2b7390315d4c"}],"style":"normal"},{"_key":"0abb7938646d","_type":"block","children":[{"_key":"0abb7938646d0","_type":"span","marks":[],"text":"üëâüèº "},{"_key":"0abb7938646d1","_type":"span","marks":["9ea297f94bcd"],"text":"UI Designing for iPhone X"},{"_key":"0abb7938646d2","_type":"span","marks":[],"text":""}],"markDefs":[{"_key":"9ea297f94bcd","_type":"link","href":"https://blog.solutelabs.com/designing-for-iphone-x-2d09abdbe1ae"}],"style":"normal"},{"_key":"ad65b0a5e7eb","_type":"block","children":[{"_key":"ad65b0a5e7eb0","_type":"span","marks":[],"text":"Do show your valuable support by you üëèüèº to the post! Thanks ‚ò∫Ô∏è"}],"markDefs":[],"style":"normal"}],"_rawFaq":null,"publishedAt":"2018-01-06T18:30:00.000Z","_updatedAt":"2021-04-08T13:11:59Z","readingTime":"2 min read","altTagMainImage":null,"titleMetaData":null,"shortanchorlinkh2":[{"h2link":"Why do you need a Property List (Plist) Decoder & Encoder?","h2shorttext":"Requirement of Plist Decoder & Encoder"}],"categories":[{"id":"61b2fbb3-23c5-54d6-aac3-bf8ba2dcecc3","title":"Blog"}],"mainImage":{"asset":{"id":"image-efe41e85d830222a0d0261fb023da4cf7970c9f1-2240x1260-png","url":"https://cdn.sanity.io/images/ay6gmb6r/production/efe41e85d830222a0d0261fb023da4cf7970c9f1-2240x1260.png","fluid":{"sizes":"(max-width: 800px) 100vw, 800px","src":"https://cdn.sanity.io/images/ay6gmb6r/production/efe41e85d830222a0d0261fb023da4cf7970c9f1-2240x1260.png?w=800&h=450&fit=crop","srcSet":"https://cdn.sanity.io/images/ay6gmb6r/production/efe41e85d830222a0d0261fb023da4cf7970c9f1-2240x1260.png?w=200&h=113&fit=crop 200w,\nhttps://cdn.sanity.io/images/ay6gmb6r/production/efe41e85d830222a0d0261fb023da4cf7970c9f1-2240x1260.png?w=400&h=225&fit=crop 400w,\nhttps://cdn.sanity.io/images/ay6gmb6r/production/efe41e85d830222a0d0261fb023da4cf7970c9f1-2240x1260.png?w=800&h=450&fit=crop 800w,\nhttps://cdn.sanity.io/images/ay6gmb6r/production/efe41e85d830222a0d0261fb023da4cf7970c9f1-2240x1260.png?w=1200&h=675&fit=crop 1200w,\nhttps://cdn.sanity.io/images/ay6gmb6r/production/efe41e85d830222a0d0261fb023da4cf7970c9f1-2240x1260.png?w=1600&h=900&fit=crop 1600w,\nhttps://cdn.sanity.io/images/ay6gmb6r/production/efe41e85d830222a0d0261fb023da4cf7970c9f1-2240x1260.png 2240w"}}},"author":{"id":"7a43bf56-7955-5cdb-992d-89f9466f210e","name":"Mansi Shah","myColor":{"hex":"#1641ff"},"image":{"asset":{"_id":"image-0f0053f8b625f3f850c9d8db94ddcc270e73f892-288x288-png","assetId":"0f0053f8b625f3f850c9d8db94ddcc270e73f892","_type":"sanity.imageAsset","id":"image-0f0053f8b625f3f850c9d8db94ddcc270e73f892-288x288-png"},"_type":"image","_key":null},"slug":{"current":"mansi-shah"}},"slug":{"current":"encoding-and-decoding-property-list-aka-plist"},"tags":[{"id":"8ccbcd68-9051-557e-89fd-c40fdca37198","slug":{"current":"property-list"},"title":"Property List "},{"id":"fe513439-f9fb-5d1d-8297-f39fe359cc1e","slug":{"current":"encoding"},"title":"Encoding"},{"id":"c35b3444-ecd0-549a-9fb5-bfc9e61cc993","slug":{"current":"app-development"},"title":"App Development"}],"referenceBlogPost":[{"mainImage":{"asset":{"id":"image-77a2046c3bbd318ab80041338f5880853aa2423a-2240x1260-png","fluid":{"src":"https://cdn.sanity.io/images/ay6gmb6r/production/77a2046c3bbd318ab80041338f5880853aa2423a-2240x1260.png?w=800&h=450&fit=crop","srcSet":"https://cdn.sanity.io/images/ay6gmb6r/production/77a2046c3bbd318ab80041338f5880853aa2423a-2240x1260.png?w=200&h=113&fit=crop 200w,\nhttps://cdn.sanity.io/images/ay6gmb6r/production/77a2046c3bbd318ab80041338f5880853aa2423a-2240x1260.png?w=400&h=225&fit=crop 400w,\nhttps://cdn.sanity.io/images/ay6gmb6r/production/77a2046c3bbd318ab80041338f5880853aa2423a-2240x1260.png?w=800&h=450&fit=crop 800w,\nhttps://cdn.sanity.io/images/ay6gmb6r/production/77a2046c3bbd318ab80041338f5880853aa2423a-2240x1260.png?w=1200&h=675&fit=crop 1200w,\nhttps://cdn.sanity.io/images/ay6gmb6r/production/77a2046c3bbd318ab80041338f5880853aa2423a-2240x1260.png?w=1600&h=900&fit=crop 1600w,\nhttps://cdn.sanity.io/images/ay6gmb6r/production/77a2046c3bbd318ab80041338f5880853aa2423a-2240x1260.png 2240w","sizes":"(max-width: 800px) 100vw, 800px"}}},"publishedAt":"2019-11-29T12:00:00.000Z","readingTime":"9 min read","author":{"name":"Karan Shah"},"slug":{"current":"client-side-vs-server-side-rendering-what-to-choose-when"},"title":"Client-side Vs. Server-side Rendering: What to choose when?"},{"mainImage":{"asset":{"id":"image-56f1411c0c5cb1acc6143bed8d5d16fd7a259ae7-2240x1260-png","fluid":{"src":"https://cdn.sanity.io/images/ay6gmb6r/production/56f1411c0c5cb1acc6143bed8d5d16fd7a259ae7-2240x1260.png?w=800&h=450&fit=crop","srcSet":"https://cdn.sanity.io/images/ay6gmb6r/production/56f1411c0c5cb1acc6143bed8d5d16fd7a259ae7-2240x1260.png?w=200&h=113&fit=crop 200w,\nhttps://cdn.sanity.io/images/ay6gmb6r/production/56f1411c0c5cb1acc6143bed8d5d16fd7a259ae7-2240x1260.png?w=400&h=225&fit=crop 400w,\nhttps://cdn.sanity.io/images/ay6gmb6r/production/56f1411c0c5cb1acc6143bed8d5d16fd7a259ae7-2240x1260.png?w=800&h=450&fit=crop 800w,\nhttps://cdn.sanity.io/images/ay6gmb6r/production/56f1411c0c5cb1acc6143bed8d5d16fd7a259ae7-2240x1260.png?w=1200&h=675&fit=crop 1200w,\nhttps://cdn.sanity.io/images/ay6gmb6r/production/56f1411c0c5cb1acc6143bed8d5d16fd7a259ae7-2240x1260.png?w=1600&h=900&fit=crop 1600w,\nhttps://cdn.sanity.io/images/ay6gmb6r/production/56f1411c0c5cb1acc6143bed8d5d16fd7a259ae7-2240x1260.png 2240w","sizes":"(max-width: 800px) 100vw, 800px"}}},"publishedAt":"2019-06-04T12:00:00.000Z","readingTime":"4 min read","author":{"name":"Krupa Suthar"},"slug":{"current":"what-is-rack-a-ruby-on-rails-webserver-interface"},"title":"What is Rack? A Ruby on Rails Webserver Interface"}]},"readNextBlog":[{"mainImage":{"asset":{"id":"image-77a2046c3bbd318ab80041338f5880853aa2423a-2240x1260-png","fluid":{"src":"https://cdn.sanity.io/images/ay6gmb6r/production/77a2046c3bbd318ab80041338f5880853aa2423a-2240x1260.png?w=800&h=450&fit=crop","srcSet":"https://cdn.sanity.io/images/ay6gmb6r/production/77a2046c3bbd318ab80041338f5880853aa2423a-2240x1260.png?w=200&h=113&fit=crop 200w,\nhttps://cdn.sanity.io/images/ay6gmb6r/production/77a2046c3bbd318ab80041338f5880853aa2423a-2240x1260.png?w=400&h=225&fit=crop 400w,\nhttps://cdn.sanity.io/images/ay6gmb6r/production/77a2046c3bbd318ab80041338f5880853aa2423a-2240x1260.png?w=800&h=450&fit=crop 800w,\nhttps://cdn.sanity.io/images/ay6gmb6r/production/77a2046c3bbd318ab80041338f5880853aa2423a-2240x1260.png?w=1200&h=675&fit=crop 1200w,\nhttps://cdn.sanity.io/images/ay6gmb6r/production/77a2046c3bbd318ab80041338f5880853aa2423a-2240x1260.png?w=1600&h=900&fit=crop 1600w,\nhttps://cdn.sanity.io/images/ay6gmb6r/production/77a2046c3bbd318ab80041338f5880853aa2423a-2240x1260.png 2240w","sizes":"(max-width: 800px) 100vw, 800px"}}},"publishedAt":"2019-11-29T12:00:00.000Z","readingTime":"9 min read","author":{"name":"Karan Shah"},"slug":{"current":"client-side-vs-server-side-rendering-what-to-choose-when"},"title":"Client-side Vs. Server-side Rendering: What to choose when?"},{"mainImage":{"asset":{"id":"image-56f1411c0c5cb1acc6143bed8d5d16fd7a259ae7-2240x1260-png","fluid":{"src":"https://cdn.sanity.io/images/ay6gmb6r/production/56f1411c0c5cb1acc6143bed8d5d16fd7a259ae7-2240x1260.png?w=800&h=450&fit=crop","srcSet":"https://cdn.sanity.io/images/ay6gmb6r/production/56f1411c0c5cb1acc6143bed8d5d16fd7a259ae7-2240x1260.png?w=200&h=113&fit=crop 200w,\nhttps://cdn.sanity.io/images/ay6gmb6r/production/56f1411c0c5cb1acc6143bed8d5d16fd7a259ae7-2240x1260.png?w=400&h=225&fit=crop 400w,\nhttps://cdn.sanity.io/images/ay6gmb6r/production/56f1411c0c5cb1acc6143bed8d5d16fd7a259ae7-2240x1260.png?w=800&h=450&fit=crop 800w,\nhttps://cdn.sanity.io/images/ay6gmb6r/production/56f1411c0c5cb1acc6143bed8d5d16fd7a259ae7-2240x1260.png?w=1200&h=675&fit=crop 1200w,\nhttps://cdn.sanity.io/images/ay6gmb6r/production/56f1411c0c5cb1acc6143bed8d5d16fd7a259ae7-2240x1260.png?w=1600&h=900&fit=crop 1600w,\nhttps://cdn.sanity.io/images/ay6gmb6r/production/56f1411c0c5cb1acc6143bed8d5d16fd7a259ae7-2240x1260.png 2240w","sizes":"(max-width: 800px) 100vw, 800px"}}},"publishedAt":"2019-06-04T12:00:00.000Z","readingTime":"4 min read","author":{"name":"Krupa Suthar"},"slug":{"current":"what-is-rack-a-ruby-on-rails-webserver-interface"},"title":"What is Rack? A Ruby on Rails Webserver Interface"}],"blogSLug":"encoding-and-decoding-property-list-aka-plist"}},"staticQueryHashes":["1951403926","2015784780","2763451262","3649515864","3810076356","4118766420"]}