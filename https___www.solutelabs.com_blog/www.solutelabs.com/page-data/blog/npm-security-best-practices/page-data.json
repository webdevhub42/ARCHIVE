{"componentChunkName":"component---src-components-blogs-blog-detail-js","path":"/blog/npm-security-best-practices","result":{"pageContext":{"post":{"id":"3b97ce10-5366-525a-8cb3-c0096450080b","title":"NPM security best practices — SoluteLabs","excerpt":"Top 10 best practices to keep your node.js app secure.","_rawBody":[{"_key":"0038ffa746f5","_type":"block","children":[{"_key":"0038ffa746f50","_type":"span","marks":[],"text":"Web Security is an ever-changing field, with attackers finding new and innovative ways to access an unsuspecting user’s system. An insecure app is bound to be exploited by a seasoned attacker, in one form or another."}],"markDefs":[],"style":"normal"},{"_key":"b9bc4bb7ec07","_type":"block","children":[{"_key":"b9bc4bb7ec070","_type":"span","marks":[],"text":"We take a look at 10 of the best security practices that you can implement right now to keep your Node.JS application safe. Without further ado, let us dive right in."}],"markDefs":[],"style":"normal"},{"_key":"ff59f0edded1","_type":"block","children":[{"_key":"ff59f0edded10","_type":"span","marks":["strong"],"text":"1. Run Node.JS as a non-root user."}],"markDefs":[],"style":"h2"},{"_key":"72942c820489","_type":"block","children":[{"_key":"72942c8204890","_type":"span","marks":[],"text":"Most node.js apps don’t need root access and can easily run without root privileges. A user should only be able to access the information and resources that they need, which means granting every user root access will leave you open to attacks. You don’t want the attacker to have unlimited power over the local machine, which they can then use to divert traffic to another server."}],"markDefs":[],"style":"normal"},{"_key":"e3993df5d6da","_type":"block","children":[{"_key":"e3993df5d6da0","_type":"span","marks":["strong"],"text":"The solution:"},{"_key":"e3993df5d6da1","_type":"span","marks":[],"text":" Create a non-root user and then run the process on the user’s behalf, by invoking the container with the flag "},{"_key":"e3993df5d6da2","_type":"span","marks":["strong"],"text":"“-u username.”"},{"_key":"e3993df5d6da3","_type":"span","marks":[],"text":" You can also bake the non-root user into the Docker image."}],"markDefs":[],"style":"normal"},{"_key":"e27cdb3c1685","_type":"block","children":[{"_key":"e27cdb3c16850","_type":"span","marks":["strong"],"text":"2. Use Two Factor Authentication."}],"markDefs":[],"style":"h2"},{"_key":"c9a3deee5590","_type":"block","children":[{"_key":"c9a3deee55900","_type":"span","marks":[],"text":"In the case of a majority of node.js development environments, the access is secured with the help of a password. But passwords such as "},{"_key":"c9a3deee55901","_type":"span","marks":["strong"],"text":"password, letmein,"},{"_key":"c9a3deee55902","_type":"span","marks":[],"text":" or "},{"_key":"c9a3deee55903","_type":"span","marks":["strong"],"text":"donkeykong"},{"_key":"c9a3deee55904","_type":"span","marks":[],"text":" are easy to guess and leaves the system open to attack. Weak session management policies implemented in applications usually leaves the door wide open to attackers. You may have a user logging in from a public computer that has a password manager, and the password that you or your company spent hours generating is now open to the public."}],"markDefs":[],"style":"normal"},{"_key":"3e02c3b9ff76","_type":"customImage","alt":"Two Factor Authentication","asset":{"_ref":"image-9498a6c73607b2bb9ccfe0e97b06ca2a8010f6e0-1050x667-png","_type":"reference"},"crop":{"_type":"sanity.imageCrop","bottom":0,"left":0,"right":0,"top":0},"hotspot":{"_type":"sanity.imageHotspot","height":1,"width":1,"x":0.5,"y":0.5},"imageFigcaption":"https://doubleoctopus.com/security-wiki/authentication/what-is-2fa/","imageFigcaptionName":"Image Source"},{"_key":"fd4769831af4","_type":"block","children":[{"_key":"fd4769831af40","_type":"span","marks":["strong"],"text":"The solution:"},{"_key":"fd4769831af41","_type":"span","marks":[],"text":" Use Two-Factor Authorization to keep all your passwords secure. Adding an extra layer of security, even if an attacker has your user’s login credentials, they still can’t get into your system without access to a secondary device, such as a mobile phone. Use pre-existing solutions such as Okta, 0Auth, or provide Two-Factor Authorization in-app using a package such as "},{"_key":"fd4769831af42","_type":"span","marks":["df64791af7a3"],"text":"speakeasy."},{"_key":"fd4769831af43","_type":"span","marks":[],"text":""}],"markDefs":[{"_key":"df64791af7a3","_type":"link","href":"https://www.npmjs.com/package/speakeasy"}],"style":"normal"},{"_key":"ee9764a6556c","_type":"block","children":[{"_key":"ee9764a6556c0","_type":"span","marks":["strong"],"text":"3. Explicitly state when a process should crash."}],"markDefs":[],"style":"h2"},{"_key":"716c7b6cac63","_type":"block","children":[{"_key":"716c7b6cac630","_type":"span","marks":[],"text":"Denial of Service (DOS) attacks will crash a system or make it inaccessible and is a preferred mode of attack among hackers. Attackers accomplish DOS attacks by sending a huge surge of traffic to your server, bombarding it with useless information that will cause the server to slow down / crash eventually. Node.JS processes will usually crash when errors are not handled properly. If the attackers know which errors will cause the system to crash, they will repeatedly send the same request."}],"markDefs":[],"style":"normal"},{"_key":"798c2ec460d9","_type":"block","children":[{"_key":"798c2ec460d90","_type":"span","marks":["strong"],"text":"The solution:"},{"_key":"798c2ec460d91","_type":"span","marks":[],"text":" Solutions include alerting any time a process crashes due to an unhandled error, avoiding crashing the process when the user input is invalid, and wrapping all routes with a catch. You can also limit the payload that a user can submit to your app/ api / service. You can also set a maximum number of requests that a user can make, and after all the requests, lock the user out for a set period."}],"markDefs":[],"style":"normal"},{"_key":"1189f655d428","_type":"block","children":[{"_key":"1189f655d4280","_type":"span","marks":["strong"],"text":"4. Keep track of all the vulnerabilities."}],"markDefs":[],"style":"h2"},{"_key":"5beb44901141","_type":"block","children":[{"_key":"5beb449011410","_type":"span","marks":[],"text":"With a large number of open-source packages available for the JavaScript ecosystem, it is easy for an attacker to sneak in malicious code into one of our applications. Keeping track of all the various versions and licensing of these packages is often tedious, leaving a window of opportunity to a dedicated attacker. It is important to keep all the dependencies in check as and when new vulnerabilities are found. Otherwise, an attacker can assess your entire web framework and attack all its known vulnerabilities."}],"markDefs":[],"style":"normal"},{"_key":"020ea1ad42c7","_type":"block","children":[{"_key":"020ea1ad42c70","_type":"span","marks":["strong"],"text":"The solution:"},{"_key":"020ea1ad42c71","_type":"span","marks":[],"text":" Use readily available tools such as "},{"_key":"020ea1ad42c72","_type":"span","marks":["b18a0e060ef5"],"text":"npm audit"},{"_key":"020ea1ad42c73","_type":"span","marks":[],"text":", "},{"_key":"020ea1ad42c74","_type":"span","marks":["8f4415a53522"],"text":"snyk"},{"_key":"020ea1ad42c75","_type":"span","marks":[],"text":", or nsp to monitor and patch all known vulnerabilities. Package managers such as Yarn can also help to block these outlets by locking versions of packages installed. By running "},{"_key":"020ea1ad42c76","_type":"span","marks":["strong"],"text":"$ npm audit,"},{"_key":"020ea1ad42c77","_type":"span","marks":[],"text":" you can find an audit report with all the installed dependencies."}],"markDefs":[{"_key":"b18a0e060ef5","_type":"link","href":"https://docs.npmjs.com/cli/audit"},{"_key":"8f4415a53522","_type":"link","href":"https://snyk.io/"}],"style":"normal"},{"_key":"7aa6a2b4e80b","_type":"block","children":[{"_key":"7aa6a2b4e80b0","_type":"span","marks":["strong"],"text":"5. Use TLS"}],"markDefs":[],"style":"h2"},{"_key":"66839f4d60f0","_type":"block","children":[{"_key":"66839f4d60f00","_type":"span","marks":[],"text":"Transport Layer Security (TLS) is critical if your app deals with sensitive data, to secure the connection and the data. Before data is transmitted between the client and the server, TLS encrypts it so that there is no pocket sniffing or man-in-the-middle attacks. A man-in-the-middle attack is a type of attack when an attacker is able to put themselves between two parties and intercept and influence the traffic between them. This type of attack can compromise the integrity of data in your application and is commonly carried out when you work over a public Wi fi network.\n"}],"markDefs":[],"style":"normal"},{"_key":"04b31d13e960","_type":"customImage","alt":"Transport Layer Security (TLS)","asset":{"_ref":"image-9ecb5439efe6d0f4c93da2e47405dcfc144b1a9d-1050x590-png","_type":"reference"}},{"_key":"020e769ace80","_type":"block","children":[{"_key":"020e769ace800","_type":"span","marks":["strong"],"text":"The solution:"},{"_key":"020e769ace801","_type":"span","marks":[],"text":" Avoiding your Node.JS application from being directly exposed to the internet is a brutal but effective way to stop MITM attacks. Terminating the SSL prior to the Node.JS stage, using a tool such as NGINX, is also a viable option. TLS is just an advanced version of the SSL, and we highly recommend using TLS to prevent any type of attack."}],"markDefs":[],"style":"normal"},{"_key":"7bf1edf25536","_type":"block","children":[{"_key":"7bf1edf255360","_type":"span","marks":["strong"],"text":"6. Escape JS, HTML and CSS output."}],"markDefs":[],"style":"h2"},{"_key":"3ae0a73a01a6","_type":"block","children":[{"_key":"3ae0a73a01a60","_type":"span","marks":[],"text":"Web languages such as HTML generally mix content with executable code. Your code may be in the form of an HTML paragraph that may contain a visual representation of the data along with JS executable instructions. Sometimes, JS code that was not intended to be displayed while rendering the HTML may actually get interpreted and executed by the browser. This commonly happens when content that was inserted into the database by an attacker is rendered."}],"markDefs":[],"style":"normal"},{"_key":"1765b6694b60","_type":"block","children":[{"_key":"1765b6694b600","_type":"span","marks":["strong"],"text":"The solution:"},{"_key":"1765b6694b601","_type":"span","marks":[],"text":" Instruct the browser to interpret any chunk of untrusted data as content only and never to interpret it. This technique is called Escaping. Escaping capabilities are provided by many NPM libraries and templating engines. Escaping is also sometimes called encoding, and it is a way of representing data that will not be executed or interpreted."}],"markDefs":[],"style":"normal"},{"_key":"a822ad5e4e9a","_type":"block","children":[{"_key":"a822ad5e4e9a0","_type":"span","marks":["strong"],"text":"7. Don’t publish secrets to the NPM registry."}],"markDefs":[],"style":"h2"},{"_key":"fdaafcaf5439","_type":"block","children":[{"_key":"fdaafcaf54390","_type":"span","marks":[],"text":"When working with the NPM registry, there is a high chance that you may publish some of the secrets such as API keys, passwords, or other secrets on the npm public registry. Files such as "},{"_key":"fdaafcaf54391","_type":"span","marks":["strong"],"text":".env,"},{"_key":"fdaafcaf54392","_type":"span","marks":[],"text":" which should ideally be added to a "},{"_key":"fdaafcaf54393","_type":"span","marks":["strong"],"text":".gitignore"},{"_key":"fdaafcaf54394","_type":"span","marks":[],"text":" to avoid committing it to an SCM, may find its way into your working directory. This is because files you do not want to commit to your repository also usually files you do not want to be published. There is also a file called ."},{"_key":"fdaafcaf54395","_type":"span","marks":["strong"],"text":"npmignore"},{"_key":"fdaafcaf54396","_type":"span","marks":[],"text":", which behaves exactly like "},{"_key":"fdaafcaf54397","_type":"span","marks":["strong"],"text":".gitignore"},{"_key":"fdaafcaf54398","_type":"span","marks":[],"text":". This comes with the additional challenge that you will most likely publish a file you thought you had excluded if you try to use both."}],"markDefs":[],"style":"normal"},{"_key":"0d3ed9821a3d","_type":"block","children":[{"_key":"0d3ed9821a3d0","_type":"span","marks":["strong"],"text":"The solution:"},{"_key":"0d3ed9821a3d1","_type":"span","marks":[],"text":" Use the "},{"_key":"0d3ed9821a3d2","_type":"span","marks":["strong"],"text":"files"},{"_key":"0d3ed9821a3d3","_type":"span","marks":[],"text":" property in package.json, that works as a whitelist and specifies the array of files that are to be included in the package to be created and installed. Also, add a "},{"_key":"0d3ed9821a3d4","_type":"span","marks":["strong"],"text":"— dry-run"},{"_key":"0d3ed9821a3d5","_type":"span","marks":[],"text":" argument to your publish command in order to see how the tarball is actually created without publishing it to the registry."}],"markDefs":[],"style":"normal"},{"_key":"a48aa01bc4d0","_type":"block","children":[{"_key":"a48aa01bc4d00","_type":"span","marks":[],"text":"8. "},{"_key":"a48aa01bc4d01","_type":"span","marks":["strong"],"text":"Be careful working with child processes."}],"markDefs":[],"style":"h2"},{"_key":"1a3be639b1e7","_type":"block","children":[{"_key":"1a3be639b1e70","_type":"span","marks":[],"text":"Shell injection attacks are one of the most common exploits on an unsecured Node.js application. In a shell injection attack, the attacker takes over the Operating System(OS) on the server and asks it to execute arbitrary commands, fully compromising the application and all its data. Using child processes and not sanitizing input data often leaves your server vulnerable to shell injection attacks. We don’t want attackers to run a command with a child process instance, which we have created from our app."}],"markDefs":[],"style":"normal"},{"_key":"c001be4b15ff","_type":"block","children":[{"_key":"c001be4b15ff0","_type":"span","marks":["strong"],"text":"The solution:"},{"_key":"c001be4b15ff1","_type":"span","marks":[],"text":" Use a "},{"_key":"c001be4b15ff2","_type":"span","marks":["strong"],"text":"child_process.exec"},{"_key":"c001be4b15ff3","_type":"span","marks":[],"text":" file which will execute only a single command with a set of attributes and will not allow shell parameter expansion."}],"markDefs":[],"style":"normal"},{"_key":"8581edba0fb9","_type":"block","children":[{"_key":"8581edba0fb90","_type":"span","marks":["strong"],"text":"9. Deserialization"}],"markDefs":[],"style":"h2"},{"_key":"1c5feca4ba67","_type":"block","children":[{"_key":"1c5feca4ba670","_type":"span","marks":[],"text":"Serialization is the process of turning some object into a data format that can be later restored into the original format, and deserialization is the reversal of that process. Insecure deserialization allows deserialization and execution of malicious objects via API calls or remote code execution. The attacker can modify the application by executing remote code on application classes, which will cause a change in the behaviour during serialization. The attacker can also tamper data objects such as cookies with malicious intent."}],"markDefs":[],"style":"normal"},{"_key":"58b0bdbc3ddf","_type":"block","children":[{"_key":"58b0bdbc3ddf0","_type":"span","marks":["strong"],"text":"The solution:"},{"_key":"58b0bdbc3ddf1","_type":"span","marks":[],"text":" In order to mitigate such attacks, we use something called cross-site request forgery (CSRF). It is as simple as generating a CSRF token from our server and adding it to a hidden form field. The CSRF middleware checks if the incoming token matches what was sent before and rejects requests where the tokens don’t match."}],"markDefs":[],"style":"normal"},{"_key":"f76bafc505c1","_type":"block","children":[{"_key":"f76bafc505c10","_type":"span","marks":["strong"],"text":"10. Hide error messages from clients"}],"markDefs":[],"style":"h2"},{"_key":"a0c99ca0883e","_type":"block","children":[{"_key":"a0c99ca0883e0","_type":"span","marks":[],"text":"If you do not handle errors properly in a Node.JS application, sensitive application details such as third party modules in use, server file paths, and other internal workflows of the application can be exploited. An attacker can also access the said information from a leak in the stack trace. Hence we recommend using an integrated express error handler that hides the error details by default."}],"markDefs":[],"style":"normal"},{"_key":"0b79b7395563","_type":"block","children":[{"_key":"0b79b73955630","_type":"span","marks":["strong"],"text":"The solution:"},{"_key":"0b79b73955631","_type":"span","marks":[],"text":" If not using an integrated express error handler, you can implement your own error handling logic using custom Error objects. In case you use this approach, make sure that you don’t return the entire Error object to the client. This will prevent the leak of sensitive application details."}],"markDefs":[],"style":"normal"},{"_key":"1f78e1db918d","_type":"block","children":[{"_key":"1f78e1db918d0","_type":"span","marks":[],"text":"There you have it! Ten of the best Node.JS security practices you can implement today that can make your app more secure. For further reading, there is a tonne of information available online, and we are pretty sure our friends at Google will be more than happy to help you out."}],"markDefs":[],"style":"normal"}],"_rawFaq":null,"publishedAt":"2020-08-28T12:00:00.000Z","_updatedAt":"2020-08-31T08:23:16Z","readingTime":"7 min read","altTagMainImage":null,"titleMetaData":null,"shortanchorlinkh2":[],"categories":[{"id":"61b2fbb3-23c5-54d6-aac3-bf8ba2dcecc3","title":"Blog"}],"mainImage":{"asset":{"id":"image-42d5c3a340f7f6b29ab96790cb9e86bc2379c865-2240x1260-png","url":"https://cdn.sanity.io/images/ay6gmb6r/production/42d5c3a340f7f6b29ab96790cb9e86bc2379c865-2240x1260.png","fluid":{"sizes":"(max-width: 800px) 100vw, 800px","src":"https://cdn.sanity.io/images/ay6gmb6r/production/42d5c3a340f7f6b29ab96790cb9e86bc2379c865-2240x1260.png?w=800&h=450&fit=crop","srcSet":"https://cdn.sanity.io/images/ay6gmb6r/production/42d5c3a340f7f6b29ab96790cb9e86bc2379c865-2240x1260.png?w=200&h=113&fit=crop 200w,\nhttps://cdn.sanity.io/images/ay6gmb6r/production/42d5c3a340f7f6b29ab96790cb9e86bc2379c865-2240x1260.png?w=400&h=225&fit=crop 400w,\nhttps://cdn.sanity.io/images/ay6gmb6r/production/42d5c3a340f7f6b29ab96790cb9e86bc2379c865-2240x1260.png?w=800&h=450&fit=crop 800w,\nhttps://cdn.sanity.io/images/ay6gmb6r/production/42d5c3a340f7f6b29ab96790cb9e86bc2379c865-2240x1260.png?w=1200&h=675&fit=crop 1200w,\nhttps://cdn.sanity.io/images/ay6gmb6r/production/42d5c3a340f7f6b29ab96790cb9e86bc2379c865-2240x1260.png?w=1600&h=900&fit=crop 1600w,\nhttps://cdn.sanity.io/images/ay6gmb6r/production/42d5c3a340f7f6b29ab96790cb9e86bc2379c865-2240x1260.png 2240w"}}},"author":{"id":"96cd32a4-0818-543e-b826-e21bea25c4a9","name":"Krupa Suthar","myColor":{"hex":"#1641ff"},"image":{"asset":{"_id":"image-7132c22211c2a705bca548065426f7f4e3347ee8-288x288-png","assetId":"7132c22211c2a705bca548065426f7f4e3347ee8","_type":"sanity.imageAsset","id":"image-7132c22211c2a705bca548065426f7f4e3347ee8-288x288-png"},"_type":"image","_key":null},"slug":{"current":"krupa-suthar"}},"slug":{"current":"npm-security-best-practices"},"tags":[{"id":"09320f57-0881-5f4f-8c62-47e072f095be","slug":{"current":"node-js"},"title":"Node Js "},{"id":"9c828179-718e-5af4-b538-002489f8c243","slug":{"current":"npm"},"title":"NPM"},{"id":"9b4c8e06-fe1d-54a8-b141-e28cfa915336","slug":{"current":"web-development"},"title":"Web Development"}],"referenceBlogPost":[{"mainImage":{"asset":{"id":"image-1cb2bba7fcb8a95bce85e08f333e94c653fa8f7f-2240x1260-png","fluid":{"src":"https://cdn.sanity.io/images/ay6gmb6r/production/1cb2bba7fcb8a95bce85e08f333e94c653fa8f7f-2240x1260.png?w=800&h=450&fit=crop","srcSet":"https://cdn.sanity.io/images/ay6gmb6r/production/1cb2bba7fcb8a95bce85e08f333e94c653fa8f7f-2240x1260.png?w=200&h=113&fit=crop 200w,\nhttps://cdn.sanity.io/images/ay6gmb6r/production/1cb2bba7fcb8a95bce85e08f333e94c653fa8f7f-2240x1260.png?w=400&h=225&fit=crop 400w,\nhttps://cdn.sanity.io/images/ay6gmb6r/production/1cb2bba7fcb8a95bce85e08f333e94c653fa8f7f-2240x1260.png?w=800&h=450&fit=crop 800w,\nhttps://cdn.sanity.io/images/ay6gmb6r/production/1cb2bba7fcb8a95bce85e08f333e94c653fa8f7f-2240x1260.png?w=1200&h=675&fit=crop 1200w,\nhttps://cdn.sanity.io/images/ay6gmb6r/production/1cb2bba7fcb8a95bce85e08f333e94c653fa8f7f-2240x1260.png?w=1600&h=900&fit=crop 1600w,\nhttps://cdn.sanity.io/images/ay6gmb6r/production/1cb2bba7fcb8a95bce85e08f333e94c653fa8f7f-2240x1260.png 2240w","sizes":"(max-width: 800px) 100vw, 800px"}}},"publishedAt":"2020-06-25T18:30:00.000Z","readingTime":"7 min read","author":{"name":"Krupa Suthar"},"slug":{"current":"top-8-node-js-frameworks-to-look"},"title":"Top 8 Node.JS Frameworks to Look at in 2020"},{"mainImage":{"asset":{"id":"image-3e93fbd92f23abd8b2f3a62b368304a37b8667f1-2240x1260-png","fluid":{"src":"https://cdn.sanity.io/images/ay6gmb6r/production/3e93fbd92f23abd8b2f3a62b368304a37b8667f1-2240x1260.png?w=800&h=450&fit=crop","srcSet":"https://cdn.sanity.io/images/ay6gmb6r/production/3e93fbd92f23abd8b2f3a62b368304a37b8667f1-2240x1260.png?w=200&h=113&fit=crop 200w,\nhttps://cdn.sanity.io/images/ay6gmb6r/production/3e93fbd92f23abd8b2f3a62b368304a37b8667f1-2240x1260.png?w=400&h=225&fit=crop 400w,\nhttps://cdn.sanity.io/images/ay6gmb6r/production/3e93fbd92f23abd8b2f3a62b368304a37b8667f1-2240x1260.png?w=800&h=450&fit=crop 800w,\nhttps://cdn.sanity.io/images/ay6gmb6r/production/3e93fbd92f23abd8b2f3a62b368304a37b8667f1-2240x1260.png?w=1200&h=675&fit=crop 1200w,\nhttps://cdn.sanity.io/images/ay6gmb6r/production/3e93fbd92f23abd8b2f3a62b368304a37b8667f1-2240x1260.png?w=1600&h=900&fit=crop 1600w,\nhttps://cdn.sanity.io/images/ay6gmb6r/production/3e93fbd92f23abd8b2f3a62b368304a37b8667f1-2240x1260.png 2240w","sizes":"(max-width: 800px) 100vw, 800px"}}},"publishedAt":"2019-12-13T12:00:00.000Z","readingTime":"14 min read","author":{"name":"Himani Kankaria"},"slug":{"current":"top-17-mobile-app-development-practices-to-follow"},"title":"Top 17 Mobile App Development Practices to Follow in 2020"}]},"readNextBlog":[{"mainImage":{"asset":{"id":"image-1cb2bba7fcb8a95bce85e08f333e94c653fa8f7f-2240x1260-png","fluid":{"src":"https://cdn.sanity.io/images/ay6gmb6r/production/1cb2bba7fcb8a95bce85e08f333e94c653fa8f7f-2240x1260.png?w=800&h=450&fit=crop","srcSet":"https://cdn.sanity.io/images/ay6gmb6r/production/1cb2bba7fcb8a95bce85e08f333e94c653fa8f7f-2240x1260.png?w=200&h=113&fit=crop 200w,\nhttps://cdn.sanity.io/images/ay6gmb6r/production/1cb2bba7fcb8a95bce85e08f333e94c653fa8f7f-2240x1260.png?w=400&h=225&fit=crop 400w,\nhttps://cdn.sanity.io/images/ay6gmb6r/production/1cb2bba7fcb8a95bce85e08f333e94c653fa8f7f-2240x1260.png?w=800&h=450&fit=crop 800w,\nhttps://cdn.sanity.io/images/ay6gmb6r/production/1cb2bba7fcb8a95bce85e08f333e94c653fa8f7f-2240x1260.png?w=1200&h=675&fit=crop 1200w,\nhttps://cdn.sanity.io/images/ay6gmb6r/production/1cb2bba7fcb8a95bce85e08f333e94c653fa8f7f-2240x1260.png?w=1600&h=900&fit=crop 1600w,\nhttps://cdn.sanity.io/images/ay6gmb6r/production/1cb2bba7fcb8a95bce85e08f333e94c653fa8f7f-2240x1260.png 2240w","sizes":"(max-width: 800px) 100vw, 800px"}}},"publishedAt":"2020-06-25T18:30:00.000Z","readingTime":"7 min read","author":{"name":"Krupa Suthar"},"slug":{"current":"top-8-node-js-frameworks-to-look"},"title":"Top 8 Node.JS Frameworks to Look at in 2020"},{"mainImage":{"asset":{"id":"image-3e93fbd92f23abd8b2f3a62b368304a37b8667f1-2240x1260-png","fluid":{"src":"https://cdn.sanity.io/images/ay6gmb6r/production/3e93fbd92f23abd8b2f3a62b368304a37b8667f1-2240x1260.png?w=800&h=450&fit=crop","srcSet":"https://cdn.sanity.io/images/ay6gmb6r/production/3e93fbd92f23abd8b2f3a62b368304a37b8667f1-2240x1260.png?w=200&h=113&fit=crop 200w,\nhttps://cdn.sanity.io/images/ay6gmb6r/production/3e93fbd92f23abd8b2f3a62b368304a37b8667f1-2240x1260.png?w=400&h=225&fit=crop 400w,\nhttps://cdn.sanity.io/images/ay6gmb6r/production/3e93fbd92f23abd8b2f3a62b368304a37b8667f1-2240x1260.png?w=800&h=450&fit=crop 800w,\nhttps://cdn.sanity.io/images/ay6gmb6r/production/3e93fbd92f23abd8b2f3a62b368304a37b8667f1-2240x1260.png?w=1200&h=675&fit=crop 1200w,\nhttps://cdn.sanity.io/images/ay6gmb6r/production/3e93fbd92f23abd8b2f3a62b368304a37b8667f1-2240x1260.png?w=1600&h=900&fit=crop 1600w,\nhttps://cdn.sanity.io/images/ay6gmb6r/production/3e93fbd92f23abd8b2f3a62b368304a37b8667f1-2240x1260.png 2240w","sizes":"(max-width: 800px) 100vw, 800px"}}},"publishedAt":"2019-12-13T12:00:00.000Z","readingTime":"14 min read","author":{"name":"Himani Kankaria"},"slug":{"current":"top-17-mobile-app-development-practices-to-follow"},"title":"Top 17 Mobile App Development Practices to Follow in 2020"}],"blogSLug":"npm-security-best-practices"}},"staticQueryHashes":["1951403926","2015784780","2763451262","3649515864","3810076356","4118766420"]}