{"componentChunkName":"component---src-components-blogs-blog-detail-js","path":"/blog/how-to-paginate-your-data-in-flutter","result":{"pageContext":{"post":{"id":"2bbcde89-156d-5be7-89bd-c53cf7fc3841","title":"How to paginate your data in Flutter","excerpt":"Flutter pagination: Create ListView, widgets, scroll listener, failure scenarios, stop the pagination. Create it from scratch & w/ Flutter Pagination Helper","_rawBody":[{"_key":"a7e6046b1226","_type":"block","children":[{"_key":"a7e6046b12260","_type":"span","marks":[],"text":"A simple workaround for the infinite scroll (Pagination) in Flutter ListView!"}],"markDefs":[],"style":"normal"},{"_key":"17c0a431d096","_type":"block","children":[{"_key":"17c0a431d0960","_type":"span","marks":[],"text":"We face many requirements in our daily application development for infinite scrolling (pagination)in ListView and we are like."}],"markDefs":[],"style":"normal"},{"_key":"129ce7283c77","_type":"block","children":[{"_key":"129ce7283c770","_type":"span","marks":[],"text":"We start creating ListView then create a list of widgets and set scroll listener and set error or failure scenarios and then lastly, stop the pagination when data loading is completed."}],"markDefs":[],"style":"normal"},{"_key":"ad9b65ea71e2","_type":"block","children":[{"_key":"ad9b65ea71e20","_type":"span","marks":[],"text":"What if I tell you that you have one widget in which you just need to pass your callback with data which will be called when user reach to the end of the list."}],"markDefs":[],"style":"normal"},{"_key":"fa58092ab4b8","_type":"customImage","asset":{"_ref":"image-75368fb9dcbe6c31ba15d9a2c95df40e05d8da50-444x252-gif","_type":"reference"}},{"_key":"d5b2b9e9c643","_type":"block","children":[{"_key":"d5b2b9e9c6430","_type":"span","marks":[],"text":"So I’ll first mention how we can implement pagination with a straight forward way and then we’ll look for some better approach."}],"markDefs":[],"style":"normal"},{"Separatorr":true,"_key":"95d9bd2b8bb4","_type":"separator"},{"_key":"b3e0b879c36f","_type":"block","children":[{"_key":"b3e0b879c36f0","_type":"span","marks":[],"text":"1. Implement pagination from scratch"}],"markDefs":[],"style":"h2"},{"_key":"ed90530598db","_type":"block","children":[{"_key":"ed90530598db0","_type":"span","marks":[],"text":"So one initial note to mobile developers that in Android or iOS we were reusing one single view in the list with different data, for eg. if in one viewport there are 7 items visible then, view objects will be created for the same to be reused."}],"markDefs":[],"style":"normal"},{"_key":"499c8025ef7c","_type":"block","children":[{"_key":"499c8025ef7c0","_type":"span","marks":[],"text":"But in Flutter, architecture is designed in a manner that whenever data is updated all view components(or you can say widget) will be recreated."}],"markDefs":[],"style":"normal"},{"_key":"978c822d350c","_type":"block","children":[{"_key":"978c822d350c0","_type":"span","marks":[],"text":"So first we need one ListView widget and one scroll listener to listen to the event when the user reaches at the end of the list to update the data."}],"level":1,"listItem":"bullet","markDefs":[],"style":"normal"},{"_key":"112896781c24","_type":"code","code":" Widget _createListView(List<NewsResponseItem> itemList) {\r\n    ScrollController _scrollController = ScrollController();\r\n    _scrollController.addListener(() {\r\n      if (_scrollController.position.maxScrollExtent ==\r\n          _scrollController.position.pixels) {\r\n        if (!isLoading) {\r\n          isLoading = !isLoading;\r\n          // Perform event when user reach at the end of list (e.g. do Api call)\r\n        }\r\n      }\r\n    });\r\n    return ListView.builder(\r\n        controller: _scrollController,\r\n        itemCount: itemList.length,\r\n        itemBuilder: (BuildContext context, int index) =>\r\n            NewsListItem(itemList[index]));\r\n  }"},{"_key":"6f7e44ef2425","_type":"block","children":[{"_key":"6f7e44ef24250","_type":"span","marks":[],"text":"Secondly, you need to return an appropriate widget on data retrieves. It can be a progress bar, list of widgets or error text as shown in the below code snippet. You can use the Bloc — Stream builder pattern to manage progress, data or error state."}],"level":1,"listItem":"bullet","markDefs":[],"style":"normal"},{"_key":"d9f242b4063c","_type":"code","code":"Widget _getPage(EventModel model) {\r\n    isLoading = false;\r\n    if (model.progress) {\r\n      // Return progress widget if item list is empty else return same list widget to rebuild\r\n      if (itemList.isEmpty) {\r\n        return ProgressIndicatorWidget();\r\n      } else {\r\n        return _createListView(itemList);\r\n      }\r\n    } else if (model.response != null) {\r\n      // Add/remove null value to show/hide progress bar and update list widget with newer items.\r\n      if (itemList.contains(null)) {\r\n        itemList.remove(null);\r\n      }\r\n      itemList.addAll(model.response);\r\n      itemList.add(null);\r\n      return _createListView(itemList);\r\n    } else {\r\n      // Show error message when unable to fetch items.\r\n      if (itemList.isEmpty) {\r\n        return ErrorTextWidget(model.error);\r\n      } else {\r\n        return _createListView(itemList);\r\n      }\r\n    }\r\n  }"},{"_key":"693fb0207f73","_type":"block","children":[{"_key":"693fb0207f730","_type":"span","marks":[],"text":"You can display progress at the bottom by returning widget conditionally. You can return view if data retrieves or progress if data is null as shown in below snippet."}],"level":1,"listItem":"bullet","markDefs":[],"style":"normal"},{"_key":"63e87cd1087e","_type":"code","code":"Widget _rowWidget(BuildContext context, NewsResponseItem newsResponseItem) {\r\n    if (newsResponseItem == null) {\r\n      return Center(\r\n        child: ProgressIndicatorWidget(),\r\n      );\r\n    } else {\r\n      return Material(\r\n        child: InkWell(\r\n          onTap: () {\r\n            _navigateToWebViewScreen(context, newsResponseItem);\r\n          },\r\n          child: Padding(\r\n            padding: EdgeInsets.only(top: 16, bottom: 16, left: 10, right: 10),\r\n            child: Container(\r\n              decoration: BoxDecoration(\r\n                  color: Colors.grey[50],\r\n                  boxShadow: [BoxShadow(color: Colors.grey, blurRadius: 10)],\r\n                  border: Border.all(color: Colors.grey[400], width: 1.0),\r\n                  borderRadius: BorderRadius.circular(5)),\r\n              child: Padding(\r\n                padding: EdgeInsets.all(10),\r\n                child: Text(\r\n                  newsResponseItem.title,\r\n                  style: TextStyle(fontSize: 18),\r\n                ),\r\n              ),\r\n            ),\r\n          ),\r\n        ),\r\n      );\r\n    }\r\n  }"},{"_key":"0da03aa5ee77","_type":"block","children":[{"_key":"0da03aa5ee770","_type":"span","marks":[],"text":"You can get the full source for above implementation from "},{"_key":"0da03aa5ee771","_type":"span","marks":["0c2cab1d61e1"],"text":"here"},{"_key":"0da03aa5ee772","_type":"span","marks":[],"text":""}],"markDefs":[{"_key":"0c2cab1d61e1","_type":"link","href":"https://github.com/akashmehta/ExploreFlutter/tree/master/lib/hackerNewsIntegration"}],"style":"normal"},{"_key":"eda64b4a05b0","_type":"block","children":[{"_key":"eda64b4a05b00","_type":"span","marks":[],"text":"Now let’s head up to some smart workaround."}],"markDefs":[],"style":"normal"},{"Separatorr":true,"_key":"3418a0ba84f4","_type":"separator"},{"_key":"5cf77dc9eb38","_type":"block","children":[{"_key":"5cf77dc9eb380","_type":"span","marks":[],"text":"2. Implement pagination using Flutter Pagination Helper"}],"markDefs":[],"style":"h2"},{"_key":"25d9a40bc5c5","_type":"block","children":[{"_key":"25d9a40bc5c50","_type":"span","marks":[],"text":"So I figured out some common and boilerplate code and made a generalized solution and created a library for that named "},{"_key":"25d9a40bc5c51","_type":"span","marks":["eeaf86a1caba"],"text":"Flutter Pagination Helper"},{"_key":"25d9a40bc5c52","_type":"span","marks":[],"text":"."}],"markDefs":[{"_key":"eeaf86a1caba","_type":"link","href":"https://pub.dartlang.org/packages/flutter_pagination_helper#-installing-tab-"}],"style":"normal"},{"_key":"25b305afede4","_type":"block","children":[{"_key":"25b305afede40","_type":"span","marks":[],"text":"Here are the steps to implement"}],"markDefs":[],"style":"normal"},{"_key":"dadf189f98fa","_type":"block","children":[{"_key":"dadf189f98fa0","_type":"span","marks":[],"text":"Implement flutter pagination dependency by declaring that in pubspec.yaml"}],"level":1,"listItem":"bullet","markDefs":[],"style":"normal"},{"_key":"cdb5d573d226","_type":"code","code":"dependencies:\nflutter_pagination_helper: ^1.0.0+5"},{"_key":"e82baa263f41","_type":"block","children":[{"_key":"e82baa263f410","_type":"span","marks":[],"text":"Import required files and initialize PaginatedListWidget as follows."}],"level":1,"listItem":"bullet","markDefs":[],"style":"normal"},{"_key":"82a93d918c83","_type":"code","code":"class CustomProgressWidget extends StatelessWidget {\n@override\nWidget build(BuildContext context) {\nreturn MaterialApp(\nhome: Scaffold(\nbody: PaginatedListWidget(\nprogressWidget: Center(\nchild: Text(\"Loading...\"),\n),\nitemListCallback: OnScrollCallback()),\n),\n);\n}\n}"},{"_key":"16815dfb618c","_type":"block","children":[{"_key":"16815dfb618c0","_type":"span","marks":[],"text":"where progressWidget is an optional parameter to assign your custom progress widget and itemListCallback is required parameter in which you need to provide the call back for data in the form of Future."}],"markDefs":[],"style":"normal"},{"_key":"50b44d2a751c","_type":"block","children":[{"_key":"50b44d2a751c0","_type":"span","marks":[],"text":"Implement ItemListCallback as bellow."}],"level":1,"listItem":"bullet","markDefs":[],"style":"normal"},{"_key":"07ead4df00ef","_type":"code","code":"class OnScrollCallback<T extends Widget> extends ItemListCallback {\n@override\nFuture<EventModel<T>> getItemList() {\n// TODO: implement getItemList\nreturn null;\n}\n}"},{"_key":"af7d6013ae26","_type":"block","children":[{"_key":"af7d6013ae260","_type":"span","marks":[],"text":"Here you need to return your items in the form of Future<EventModel<T>>"}],"level":1,"listItem":"bullet","markDefs":[],"style":"normal"},{"_key":"0d6118e810bf","_type":"block","children":[{"_key":"0d6118e810bf0","_type":"span","marks":[],"text":"Where EventModel is model which stores different states such as progress bar visibility, data, and error message as below."}],"markDefs":[],"style":"normal"},{"_key":"4e996b9c237a","_type":"code","code":"class EventModel<T extends Widget> {\nfinal bool progress;\nfinal List<T> data;\nfinal String error;\nfinal bool stopLoading;\n\nEventModel({this.progress, this.data, this.error, this.stopLoading});\n}"},{"_key":"5af1e43334ef","_type":"block","children":[{"_key":"5af1e43334ef0","_type":"span","marks":[],"text":"And your output for the list with default progress widget will be as bellow."}],"markDefs":[],"style":"normal"},{"_key":"a01a605b15d6","_type":"customImage","alt":"Default Progress Widget","asset":{"_ref":"image-90c00f5b57a66c01fb4cf00f9bd524d546ec6e05-320x569-gif","_type":"reference"},"imageFigcaptionName":"Default Progress Widget"},{"_key":"5ec6e2486f5c","_type":"block","children":[{"_key":"5ec6e2486f5c0","_type":"span","marks":[],"text":"And the output for a list with custom progress widget will be as bellow."}],"markDefs":[],"style":"normal"},{"_key":"87d1dd1ab0bb","_type":"customImage","alt":"Custom progress widget","asset":{"_ref":"image-a10c67a13582af6a26ccd44008a88b86e5b1db53-320x569-gif","_type":"reference"},"imageFigcaptionName":"Custom progress widget"},{"_key":"980aa2d631ef","_type":"block","children":[{"_key":"980aa2d631ef0","_type":"span","marks":[],"text":"Conclusion :"}],"markDefs":[],"style":"h2"},{"_key":"06a3d731b4ea","_type":"block","children":[{"_key":"06a3d731b4ea0","_type":"span","marks":[],"text":"For the major requirement of Flutter pagination ListView, Flutter Pagination Helper will be a more suitable option and for more specification, you can go with the first option."}],"markDefs":[],"style":"normal"},{"_key":"644fedcfda9b","_type":"block","children":[{"_key":"644fedcfda9b0","_type":"span","marks":[],"text":"You can find the full source for the library at"}],"markDefs":[],"style":"normal"},{"_key":"f188f1817758","_type":"urllink","shortDescription":"flutter_pagination_helper Flutter and Dart package - Reduce your boilerplate code to implement pagination in flutter…","title":"flutter_pagination_helper | Flutter Package ","urlLink":"https://pub.dev/packages/flutter_pagination_helper#-installing-tab-","urlLinkImage":{"_type":"customImage","asset":{"_ref":"image-8e3eac041ad4ebeaa8cb387de776b51869011f99-290x200-png","_type":"reference"}}}],"_rawFaq":[{"_key":"3c48abe0aaac","_type":"question","answer":[{"_key":"d0355eb7465e","_type":"block","children":[{"_key":"8e8eaee44795","_type":"span","marks":[],"text":"Pagination in Flutter means the process of dividing digital content into discrete pages."}],"markDefs":[],"style":"normal"}],"question":"What is pagination in flutter?"},{"_key":"d02ae6adf472","_type":"question","answer":[{"_key":"04e446fd48e4","_type":"block","children":[{"_key":"309c8d5d37b7","_type":"span","marks":[],"text":"Pagination is used to divide multiple digital data of an application and showcase it across multiple pages. So if you have a huge amount of data to be displayed on your web or mobile application, you can use pagination to divide the content across multiple pages, but in the single space. The most prominent examples of pagination is Google Search Results Pages (SERPs), Blogs of various websites, etc."}],"markDefs":[],"style":"normal"}],"question":"What is the purpose of pagination?"},{"_key":"abbaf127648f","_type":"question","answer":[{"_key":"cd84a9670e83","_type":"block","children":[{"_key":"9b31ad952c99","_type":"span","marks":[],"text":"PageView widget in Flutter allows you to create pages and define how they need to be scrolled and in which direction. You can use PageView in Flutter in three different ways, 1. Using the PageView Constructor directly for Static pageviews 2. Using the PageView.Builder for creating Dynamic pageviews 3. PageView.Custom for creating custom scroll actions or animations"}],"markDefs":[],"style":"normal"}],"question":"How do you use pageview in Flutter?"},{"_key":"0836d37b262a","_type":"question","answer":[{"_key":"37a0f3477b1a","_type":"block","children":[{"_key":"505a7b6c5c6e","_type":"span","marks":[],"text":"Carousels show multiple items one at a time. If you want to add carousel (slider image) in your Flutter application, follow this process, 1. Use carousel_slider package 2. Add dependency to your pubspec.yaml file 3. Add images to assets 4. Import carousel package into the Dart file 5. Prepare UI for carousel 6. Create the carousel (slider image)"}],"markDefs":[],"style":"normal"}],"question":"How do you add carousel in Flutter?"},{"_key":"99b5ed302cd5","_type":"question","answer":[{"_key":"dd419323ebc4","_type":"block","children":[{"_key":"0f341e6fffdf","_type":"span","marks":[],"text":"Since Flutter doesn't provide the inbuilt feature to show Scrollbar, you can instead use a Flutter widget, \"scrollbar()\". Use the property, isAlwaysShown: true with the Scrollbar widget and create a ScrollController in the State object before passing it manually to the ListView controller. This is how you can add scrollbar to your Flutter app."}],"markDefs":[],"style":"normal"}],"question":"How do I add scrollbar to my Flutter app?"}],"publishedAt":"2019-01-14T18:30:00.000Z","_updatedAt":"2021-04-07T11:45:23Z","readingTime":"3 min read","altTagMainImage":null,"titleMetaData":null,"shortanchorlinkh2":[{"h2link":"1. Implement pagination from scratch","h2shorttext":"Pagination from scratch"},{"h2link":"2. Implement pagination using Flutter Pagination Helper","h2shorttext":"Flutter Pagination Helper"}],"categories":[{"id":"61b2fbb3-23c5-54d6-aac3-bf8ba2dcecc3","title":"Blog"}],"mainImage":{"asset":{"id":"image-9627a7860fb7bd20a8688333b2de1df81018f60a-2240x1260-png","url":"https://cdn.sanity.io/images/ay6gmb6r/production/9627a7860fb7bd20a8688333b2de1df81018f60a-2240x1260.png","fluid":{"sizes":"(max-width: 800px) 100vw, 800px","src":"https://cdn.sanity.io/images/ay6gmb6r/production/9627a7860fb7bd20a8688333b2de1df81018f60a-2240x1260.png?w=800&h=450&fit=crop","srcSet":"https://cdn.sanity.io/images/ay6gmb6r/production/9627a7860fb7bd20a8688333b2de1df81018f60a-2240x1260.png?w=200&h=113&fit=crop 200w,\nhttps://cdn.sanity.io/images/ay6gmb6r/production/9627a7860fb7bd20a8688333b2de1df81018f60a-2240x1260.png?w=400&h=225&fit=crop 400w,\nhttps://cdn.sanity.io/images/ay6gmb6r/production/9627a7860fb7bd20a8688333b2de1df81018f60a-2240x1260.png?w=800&h=450&fit=crop 800w,\nhttps://cdn.sanity.io/images/ay6gmb6r/production/9627a7860fb7bd20a8688333b2de1df81018f60a-2240x1260.png?w=1200&h=675&fit=crop 1200w,\nhttps://cdn.sanity.io/images/ay6gmb6r/production/9627a7860fb7bd20a8688333b2de1df81018f60a-2240x1260.png?w=1600&h=900&fit=crop 1600w,\nhttps://cdn.sanity.io/images/ay6gmb6r/production/9627a7860fb7bd20a8688333b2de1df81018f60a-2240x1260.png 2240w"}}},"author":{"id":"b7c8657e-a8f0-52ba-991b-dbaeefa28625","name":"Aakash Mehta","myColor":{"hex":"#1641ff"},"image":{"asset":{"_id":"image-312a74ef96f972caaaee69c962f4a7c55346076d-288x288-png","assetId":"312a74ef96f972caaaee69c962f4a7c55346076d","_type":"sanity.imageAsset","id":"image-312a74ef96f972caaaee69c962f4a7c55346076d-288x288-png"},"_type":"image","_key":null},"slug":{"current":"aakash-mehta"}},"slug":{"current":"how-to-paginate-your-data-in-flutter"},"tags":[{"id":"759ffff6-24cd-5a36-a895-100080b7136d","slug":{"current":"flutter"},"title":"Flutter"},{"id":"c35b3444-ecd0-549a-9fb5-bfc9e61cc993","slug":{"current":"app-development"},"title":"App Development"}],"referenceBlogPost":[{"mainImage":{"asset":{"id":"image-b0698d4d06fbd81e47ec12e5c5d956080bb6be15-2240x1260-png","fluid":{"src":"https://cdn.sanity.io/images/ay6gmb6r/production/b0698d4d06fbd81e47ec12e5c5d956080bb6be15-2240x1260.png?w=800&h=450&fit=crop","srcSet":"https://cdn.sanity.io/images/ay6gmb6r/production/b0698d4d06fbd81e47ec12e5c5d956080bb6be15-2240x1260.png?w=200&h=113&fit=crop 200w,\nhttps://cdn.sanity.io/images/ay6gmb6r/production/b0698d4d06fbd81e47ec12e5c5d956080bb6be15-2240x1260.png?w=400&h=225&fit=crop 400w,\nhttps://cdn.sanity.io/images/ay6gmb6r/production/b0698d4d06fbd81e47ec12e5c5d956080bb6be15-2240x1260.png?w=800&h=450&fit=crop 800w,\nhttps://cdn.sanity.io/images/ay6gmb6r/production/b0698d4d06fbd81e47ec12e5c5d956080bb6be15-2240x1260.png?w=1200&h=675&fit=crop 1200w,\nhttps://cdn.sanity.io/images/ay6gmb6r/production/b0698d4d06fbd81e47ec12e5c5d956080bb6be15-2240x1260.png?w=1600&h=900&fit=crop 1600w,\nhttps://cdn.sanity.io/images/ay6gmb6r/production/b0698d4d06fbd81e47ec12e5c5d956080bb6be15-2240x1260.png 2240w","sizes":"(max-width: 800px) 100vw, 800px"}}},"publishedAt":"2018-12-31T18:30:00.000Z","readingTime":"4 min read","author":{"name":"Milind Mevada"},"slug":{"current":"integrating-third-party-native-sdks-in-flutter"},"title":"Integrating third-party native SDKs in Flutter"},{"mainImage":{"asset":{"id":"image-c184f98b0b009becaf11c15c2272e16d53539d9e-2240x1260-png","fluid":{"src":"https://cdn.sanity.io/images/ay6gmb6r/production/c184f98b0b009becaf11c15c2272e16d53539d9e-2240x1260.png?w=800&h=450&fit=crop","srcSet":"https://cdn.sanity.io/images/ay6gmb6r/production/c184f98b0b009becaf11c15c2272e16d53539d9e-2240x1260.png?w=200&h=113&fit=crop 200w,\nhttps://cdn.sanity.io/images/ay6gmb6r/production/c184f98b0b009becaf11c15c2272e16d53539d9e-2240x1260.png?w=400&h=225&fit=crop 400w,\nhttps://cdn.sanity.io/images/ay6gmb6r/production/c184f98b0b009becaf11c15c2272e16d53539d9e-2240x1260.png?w=800&h=450&fit=crop 800w,\nhttps://cdn.sanity.io/images/ay6gmb6r/production/c184f98b0b009becaf11c15c2272e16d53539d9e-2240x1260.png?w=1200&h=675&fit=crop 1200w,\nhttps://cdn.sanity.io/images/ay6gmb6r/production/c184f98b0b009becaf11c15c2272e16d53539d9e-2240x1260.png?w=1600&h=900&fit=crop 1600w,\nhttps://cdn.sanity.io/images/ay6gmb6r/production/c184f98b0b009becaf11c15c2272e16d53539d9e-2240x1260.png 2240w","sizes":"(max-width: 800px) 100vw, 800px"}}},"publishedAt":"2019-11-22T12:00:00.000Z","readingTime":"17 min read","author":{"name":"Karan Shah"},"slug":{"current":"flutter-tutorial-for-beginners-step-by-step-guide"},"title":"Flutter Tutorial for Beginners: Step by Step Guide to Build Apps"}]},"readNextBlog":[{"mainImage":{"asset":{"id":"image-b0698d4d06fbd81e47ec12e5c5d956080bb6be15-2240x1260-png","fluid":{"src":"https://cdn.sanity.io/images/ay6gmb6r/production/b0698d4d06fbd81e47ec12e5c5d956080bb6be15-2240x1260.png?w=800&h=450&fit=crop","srcSet":"https://cdn.sanity.io/images/ay6gmb6r/production/b0698d4d06fbd81e47ec12e5c5d956080bb6be15-2240x1260.png?w=200&h=113&fit=crop 200w,\nhttps://cdn.sanity.io/images/ay6gmb6r/production/b0698d4d06fbd81e47ec12e5c5d956080bb6be15-2240x1260.png?w=400&h=225&fit=crop 400w,\nhttps://cdn.sanity.io/images/ay6gmb6r/production/b0698d4d06fbd81e47ec12e5c5d956080bb6be15-2240x1260.png?w=800&h=450&fit=crop 800w,\nhttps://cdn.sanity.io/images/ay6gmb6r/production/b0698d4d06fbd81e47ec12e5c5d956080bb6be15-2240x1260.png?w=1200&h=675&fit=crop 1200w,\nhttps://cdn.sanity.io/images/ay6gmb6r/production/b0698d4d06fbd81e47ec12e5c5d956080bb6be15-2240x1260.png?w=1600&h=900&fit=crop 1600w,\nhttps://cdn.sanity.io/images/ay6gmb6r/production/b0698d4d06fbd81e47ec12e5c5d956080bb6be15-2240x1260.png 2240w","sizes":"(max-width: 800px) 100vw, 800px"}}},"publishedAt":"2018-12-31T18:30:00.000Z","readingTime":"4 min read","author":{"name":"Milind Mevada"},"slug":{"current":"integrating-third-party-native-sdks-in-flutter"},"title":"Integrating third-party native SDKs in Flutter"},{"mainImage":{"asset":{"id":"image-c184f98b0b009becaf11c15c2272e16d53539d9e-2240x1260-png","fluid":{"src":"https://cdn.sanity.io/images/ay6gmb6r/production/c184f98b0b009becaf11c15c2272e16d53539d9e-2240x1260.png?w=800&h=450&fit=crop","srcSet":"https://cdn.sanity.io/images/ay6gmb6r/production/c184f98b0b009becaf11c15c2272e16d53539d9e-2240x1260.png?w=200&h=113&fit=crop 200w,\nhttps://cdn.sanity.io/images/ay6gmb6r/production/c184f98b0b009becaf11c15c2272e16d53539d9e-2240x1260.png?w=400&h=225&fit=crop 400w,\nhttps://cdn.sanity.io/images/ay6gmb6r/production/c184f98b0b009becaf11c15c2272e16d53539d9e-2240x1260.png?w=800&h=450&fit=crop 800w,\nhttps://cdn.sanity.io/images/ay6gmb6r/production/c184f98b0b009becaf11c15c2272e16d53539d9e-2240x1260.png?w=1200&h=675&fit=crop 1200w,\nhttps://cdn.sanity.io/images/ay6gmb6r/production/c184f98b0b009becaf11c15c2272e16d53539d9e-2240x1260.png?w=1600&h=900&fit=crop 1600w,\nhttps://cdn.sanity.io/images/ay6gmb6r/production/c184f98b0b009becaf11c15c2272e16d53539d9e-2240x1260.png 2240w","sizes":"(max-width: 800px) 100vw, 800px"}}},"publishedAt":"2019-11-22T12:00:00.000Z","readingTime":"17 min read","author":{"name":"Karan Shah"},"slug":{"current":"flutter-tutorial-for-beginners-step-by-step-guide"},"title":"Flutter Tutorial for Beginners: Step by Step Guide to Build Apps"}],"blogSLug":"how-to-paginate-your-data-in-flutter"}},"staticQueryHashes":["1951403926","2015784780","2763451262","3649515864","3810076356","4118766420"]}